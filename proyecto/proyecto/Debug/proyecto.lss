
proyecto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800100  00001276  0000130a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a9  0080028c  0080028c  00001496  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00001534  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001767  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000099c  00000000  00000000  00002d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a69  00000000  00000000  00003727  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003cc  00000000  00000000  00004190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a7  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fa7  00000000  00000000  00004e03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00005daa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e7       	ldi	r30, 0x76	; 118
      7c:	f2 e1       	ldi	r31, 0x12	; 18
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 38       	cpi	r26, 0x8C	; 140
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac e8       	ldi	r26, 0x8C	; 140
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 33       	cpi	r26, 0x35	; 53
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 82 05 	call	0xb04	; 0xb04 <main>
      9e:	0c 94 39 09 	jmp	0x1272	; 0x1272 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
}

bool ESP8266_Close()
{
	return SendATandExpectResponse("AT+CIPCLOSE=1", "\r\nOK\r\n");
}
      a6:	87 e6       	ldi	r24, 0x67	; 103
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
      ae:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
      b2:	88 e9       	ldi	r24, 0x98	; 152
      b4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
      b8:	86 e0       	ldi	r24, 0x06	; 6
      ba:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
      be:	08 95       	ret

000000c0 <USART_TxChar>:
      c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
      c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
      c8:	85 ff       	sbrs	r24, 5
      ca:	fc cf       	rjmp	.-8      	; 0xc4 <USART_TxChar+0x4>
      cc:	08 95       	ret

000000ce <USART_SendString>:
      ce:	0f 93       	push	r16
      d0:	1f 93       	push	r17
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	8c 01       	movw	r16, r24
      d8:	c0 e0       	ldi	r28, 0x00	; 0
      da:	d0 e0       	ldi	r29, 0x00	; 0
      dc:	03 c0       	rjmp	.+6      	; 0xe4 <USART_SendString+0x16>
      de:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_TxChar>
      e2:	21 96       	adiw	r28, 0x01	; 1
      e4:	f8 01       	movw	r30, r16
      e6:	ec 0f       	add	r30, r28
      e8:	fd 1f       	adc	r31, r29
      ea:	80 81       	ld	r24, Z
      ec:	81 11       	cpse	r24, r1
      ee:	f7 cf       	rjmp	.-18     	; 0xde <USART_SendString+0x10>
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	1f 91       	pop	r17
      f6:	0f 91       	pop	r16
      f8:	08 95       	ret

000000fa <Read_Response>:
      fa:	2f 92       	push	r2
      fc:	3f 92       	push	r3
      fe:	4f 92       	push	r4
     100:	5f 92       	push	r5
     102:	6f 92       	push	r6
     104:	7f 92       	push	r7
     106:	8f 92       	push	r8
     108:	9f 92       	push	r9
     10a:	af 92       	push	r10
     10c:	bf 92       	push	r11
     10e:	cf 92       	push	r12
     110:	df 92       	push	r13
     112:	ef 92       	push	r14
     114:	ff 92       	push	r15
     116:	0f 93       	push	r16
     118:	1f 93       	push	r17
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	00 d0       	rcall	.+0      	; 0x120 <Read_Response+0x26>
     120:	00 d0       	rcall	.+0      	; 0x122 <Read_Response+0x28>
     122:	cd b7       	in	r28, 0x3d	; 61
     124:	de b7       	in	r29, 0x3e	; 62
     126:	9a 83       	std	Y+2, r25	; 0x02
     128:	89 83       	std	Y+1, r24	; 0x01
     12a:	8d b7       	in	r24, 0x3d	; 61
     12c:	9e b7       	in	r25, 0x3e	; 62
     12e:	9c 83       	std	Y+4, r25	; 0x04
     130:	8b 83       	std	Y+3, r24	; 0x03
     132:	e9 81       	ldd	r30, Y+1	; 0x01
     134:	fa 81       	ldd	r31, Y+2	; 0x02
     136:	01 90       	ld	r0, Z+
     138:	00 20       	and	r0, r0
     13a:	e9 f7       	brne	.-6      	; 0x136 <Read_Response+0x3c>
     13c:	31 97       	sbiw	r30, 0x01	; 1
     13e:	4f 01       	movw	r8, r30
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	88 1a       	sub	r8, r24
     146:	99 0a       	sbc	r9, r25
     148:	99 24       	eor	r9, r9
     14a:	14 01       	movw	r2, r8
     14c:	91 e0       	ldi	r25, 0x01	; 1
     14e:	29 1a       	sub	r2, r25
     150:	31 08       	sbc	r3, r1
     152:	8d b7       	in	r24, 0x3d	; 61
     154:	9e b7       	in	r25, 0x3e	; 62
     156:	88 19       	sub	r24, r8
     158:	99 09       	sbc	r25, r9
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	9e bf       	out	0x3e, r25	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	8d bf       	out	0x3d, r24	; 61
     164:	0d b7       	in	r16, 0x3d	; 61
     166:	1e b7       	in	r17, 0x3e	; 62
     168:	0f 5f       	subi	r16, 0xFF	; 255
     16a:	1f 4f       	sbci	r17, 0xFF	; 255
     16c:	41 2c       	mov	r4, r1
     16e:	51 2c       	mov	r5, r1
     170:	32 01       	movw	r6, r4
     172:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <__data_end>
     176:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <__data_end+0x1>
     17a:	a0 91 8e 02 	lds	r26, 0x028E	; 0x80028e <__data_end+0x2>
     17e:	b0 91 8f 02 	lds	r27, 0x028F	; 0x80028f <__data_end+0x3>
     182:	80 5f       	subi	r24, 0xF0	; 240
     184:	98 4d       	sbci	r25, 0xD8	; 216
     186:	af 4f       	sbci	r26, 0xFF	; 255
     188:	bf 4f       	sbci	r27, 0xFF	; 255
     18a:	48 16       	cp	r4, r24
     18c:	59 06       	cpc	r5, r25
     18e:	6a 06       	cpc	r6, r26
     190:	7b 06       	cpc	r7, r27
     192:	60 f0       	brcs	.+24     	; 0x1ac <Read_Response+0xb2>
     194:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <__data_end>
     198:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <__data_end+0x1>
     19c:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <__data_end+0x2>
     1a0:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <__data_end+0x3>
     1a4:	82 e0       	ldi	r24, 0x02	; 2
     1a6:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <Response_Status>
     1aa:	71 c0       	rjmp	.+226    	; 0x28e <Read_Response+0x194>
     1ac:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Response_Status>
     1b0:	84 30       	cpi	r24, 0x04	; 4
     1b2:	11 f4       	brne	.+4      	; 0x1b8 <Read_Response+0xbe>
     1b4:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <Response_Status>
     1b8:	e4 e9       	ldi	r30, 0x94	; 148
     1ba:	f2 e0       	ldi	r31, 0x02	; 2
     1bc:	01 90       	ld	r0, Z+
     1be:	00 20       	and	r0, r0
     1c0:	e9 f7       	brne	.-6      	; 0x1bc <Read_Response+0xc2>
     1c2:	31 97       	sbiw	r30, 0x01	; 1
     1c4:	cf 01       	movw	r24, r30
     1c6:	84 59       	subi	r24, 0x94	; 148
     1c8:	92 40       	sbci	r25, 0x02	; 2
     1ca:	6c 01       	movw	r12, r24
     1cc:	e1 2c       	mov	r14, r1
     1ce:	f1 2c       	mov	r15, r1
     1d0:	c1 14       	cp	r12, r1
     1d2:	d1 04       	cpc	r13, r1
     1d4:	e1 04       	cpc	r14, r1
     1d6:	f1 04       	cpc	r15, r1
     1d8:	09 f4       	brne	.+2      	; 0x1dc <Read_Response+0xe2>
     1da:	4d c0       	rjmp	.+154    	; 0x276 <Read_Response+0x17c>
     1dc:	87 eb       	ldi	r24, 0xB7	; 183
     1de:	9b e0       	ldi	r25, 0x0B	; 11
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <Read_Response+0xe6>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <Read_Response+0xec>
     1e6:	00 00       	nop
     1e8:	9f ef       	ldi	r25, 0xFF	; 255
     1ea:	49 1a       	sub	r4, r25
     1ec:	59 0a       	sbc	r5, r25
     1ee:	69 0a       	sbc	r6, r25
     1f0:	79 0a       	sbc	r7, r25
     1f2:	e4 e9       	ldi	r30, 0x94	; 148
     1f4:	f2 e0       	ldi	r31, 0x02	; 2
     1f6:	01 90       	ld	r0, Z+
     1f8:	00 20       	and	r0, r0
     1fa:	e9 f7       	brne	.-6      	; 0x1f6 <Read_Response+0xfc>
     1fc:	31 97       	sbiw	r30, 0x01	; 1
     1fe:	cf 01       	movw	r24, r30
     200:	84 59       	subi	r24, 0x94	; 148
     202:	92 40       	sbci	r25, 0x02	; 2
     204:	a0 e0       	ldi	r26, 0x00	; 0
     206:	b0 e0       	ldi	r27, 0x00	; 0
     208:	c8 16       	cp	r12, r24
     20a:	d9 06       	cpc	r13, r25
     20c:	ea 06       	cpc	r14, r26
     20e:	fb 06       	cpc	r15, r27
     210:	91 f5       	brne	.+100    	; 0x276 <Read_Response+0x17c>
     212:	27 c0       	rjmp	.+78     	; 0x262 <Read_Response+0x168>
     214:	a1 01       	movw	r20, r2
     216:	b8 01       	movw	r22, r16
     218:	6f 5f       	subi	r22, 0xFF	; 255
     21a:	7f 4f       	sbci	r23, 0xFF	; 255
     21c:	c8 01       	movw	r24, r16
     21e:	0e 94 0d 06 	call	0xc1a	; 0xc1a <memmove>
     222:	f5 01       	movw	r30, r10
     224:	ec 56       	subi	r30, 0x6C	; 108
     226:	fd 4f       	sbci	r31, 0xFD	; 253
     228:	80 81       	ld	r24, Z
     22a:	f8 01       	movw	r30, r16
     22c:	e2 0d       	add	r30, r2
     22e:	f3 1d       	adc	r31, r3
     230:	80 83       	st	Z, r24
     232:	a4 01       	movw	r20, r8
     234:	69 81       	ldd	r22, Y+1	; 0x01
     236:	7a 81       	ldd	r23, Y+2	; 0x02
     238:	c8 01       	movw	r24, r16
     23a:	0e 94 1f 06 	call	0xc3e	; 0xc3e <strncmp>
     23e:	89 2b       	or	r24, r25
     240:	61 f4       	brne	.+24     	; 0x25a <Read_Response+0x160>
     242:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <__data_end>
     246:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <__data_end+0x1>
     24a:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <__data_end+0x2>
     24e:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <__data_end+0x3>
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <Response_Status>
     258:	1a c0       	rjmp	.+52     	; 0x28e <Read_Response+0x194>
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	a8 1a       	sub	r10, r24
     25e:	b8 0a       	sbc	r11, r24
     260:	02 c0       	rjmp	.+4      	; 0x266 <Read_Response+0x16c>
     262:	a1 2c       	mov	r10, r1
     264:	b1 2c       	mov	r11, r1
     266:	c5 01       	movw	r24, r10
     268:	a0 e0       	ldi	r26, 0x00	; 0
     26a:	b0 e0       	ldi	r27, 0x00	; 0
     26c:	8c 15       	cp	r24, r12
     26e:	9d 05       	cpc	r25, r13
     270:	ae 05       	cpc	r26, r14
     272:	bf 05       	cpc	r27, r15
     274:	78 f2       	brcs	.-98     	; 0x214 <Read_Response+0x11a>
     276:	87 eb       	ldi	r24, 0xB7	; 183
     278:	9b e0       	ldi	r25, 0x0B	; 11
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <Read_Response+0x180>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <Read_Response+0x186>
     280:	00 00       	nop
     282:	9f ef       	ldi	r25, 0xFF	; 255
     284:	49 1a       	sub	r4, r25
     286:	59 0a       	sbc	r5, r25
     288:	69 0a       	sbc	r6, r25
     28a:	79 0a       	sbc	r7, r25
     28c:	72 cf       	rjmp	.-284    	; 0x172 <Read_Response+0x78>
     28e:	8b 81       	ldd	r24, Y+3	; 0x03
     290:	9c 81       	ldd	r25, Y+4	; 0x04
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	9e bf       	out	0x3e, r25	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	8d bf       	out	0x3d, r24	; 61
     29c:	0f 90       	pop	r0
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	1f 91       	pop	r17
     2aa:	0f 91       	pop	r16
     2ac:	ff 90       	pop	r15
     2ae:	ef 90       	pop	r14
     2b0:	df 90       	pop	r13
     2b2:	cf 90       	pop	r12
     2b4:	bf 90       	pop	r11
     2b6:	af 90       	pop	r10
     2b8:	9f 90       	pop	r9
     2ba:	8f 90       	pop	r8
     2bc:	7f 90       	pop	r7
     2be:	6f 90       	pop	r6
     2c0:	5f 90       	pop	r5
     2c2:	4f 90       	pop	r4
     2c4:	3f 90       	pop	r3
     2c6:	2f 90       	pop	r2
     2c8:	08 95       	ret

000002ca <ESP8266_Clear>:
     2ca:	80 ea       	ldi	r24, 0xA0	; 160
     2cc:	e4 e9       	ldi	r30, 0x94	; 148
     2ce:	f2 e0       	ldi	r31, 0x02	; 2
     2d0:	df 01       	movw	r26, r30
     2d2:	1d 92       	st	X+, r1
     2d4:	8a 95       	dec	r24
     2d6:	e9 f7       	brne	.-6      	; 0x2d2 <ESP8266_Clear+0x8>
     2d8:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <Counter+0x1>
     2dc:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <Counter>
     2e0:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <pointer+0x1>
     2e4:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <pointer>
     2e8:	08 95       	ret

000002ea <Start_Read_Response>:
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	ec 01       	movw	r28, r24
     2f0:	84 e0       	ldi	r24, 0x04	; 4
     2f2:	80 93 34 03 	sts	0x0334, r24	; 0x800334 <Response_Status>
     2f6:	ce 01       	movw	r24, r28
     2f8:	0e 94 7d 00 	call	0xfa	; 0xfa <Read_Response>
     2fc:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Response_Status>
     300:	88 23       	and	r24, r24
     302:	c9 f3       	breq	.-14     	; 0x2f6 <Start_Read_Response+0xc>
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <WaitForExpectedResponse>:
     30a:	0e 94 75 01 	call	0x2ea	; 0x2ea <Start_Read_Response>
     30e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Response_Status>
     312:	82 30       	cpi	r24, 0x02	; 2
     314:	11 f0       	breq	.+4      	; 0x31a <WaitForExpectedResponse+0x10>
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	08 95       	ret
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	08 95       	ret

0000031e <SendATandExpectResponse>:
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	8c 01       	movw	r16, r24
     328:	eb 01       	movw	r28, r22
     32a:	0e 94 65 01 	call	0x2ca	; 0x2ca <ESP8266_Clear>
     32e:	c8 01       	movw	r24, r16
     330:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
     334:	89 e8       	ldi	r24, 0x89	; 137
     336:	92 e0       	ldi	r25, 0x02	; 2
     338:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 85 01 	call	0x30a	; 0x30a <WaitForExpectedResponse>
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	1f 91       	pop	r17
     348:	0f 91       	pop	r16
     34a:	08 95       	ret

0000034c <ESP8266_ApplicationMode>:
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
     358:	64 97       	sbiw	r28, 0x14	; 20
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	8e 01       	movw	r16, r28
     366:	0f 5f       	subi	r16, 0xFF	; 255
     368:	1f 4f       	sbci	r17, 0xFF	; 255
     36a:	94 e1       	ldi	r25, 0x14	; 20
     36c:	f8 01       	movw	r30, r16
     36e:	11 92       	st	Z+, r1
     370:	9a 95       	dec	r25
     372:	e9 f7       	brne	.-6      	; 0x36e <ESP8266_ApplicationMode+0x22>
     374:	1f 92       	push	r1
     376:	8f 93       	push	r24
     378:	87 e0       	ldi	r24, 0x07	; 7
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	9f 93       	push	r25
     37e:	8f 93       	push	r24
     380:	1f 93       	push	r17
     382:	0f 93       	push	r16
     384:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
     388:	1c 8a       	std	Y+20, r1	; 0x14
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	71 e0       	ldi	r23, 0x01	; 1
     38e:	c8 01       	movw	r24, r16
     390:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	0f 90       	pop	r0
     39e:	0f 90       	pop	r0
     3a0:	64 96       	adiw	r28, 0x14	; 20
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	1f 91       	pop	r17
     3b2:	0f 91       	pop	r16
     3b4:	08 95       	ret

000003b6 <ESP8266_ConnectionMode>:
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	cd b7       	in	r28, 0x3d	; 61
     3c0:	de b7       	in	r29, 0x3e	; 62
     3c2:	64 97       	sbiw	r28, 0x14	; 20
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	8e 01       	movw	r16, r28
     3d0:	0f 5f       	subi	r16, 0xFF	; 255
     3d2:	1f 4f       	sbci	r17, 0xFF	; 255
     3d4:	94 e1       	ldi	r25, 0x14	; 20
     3d6:	f8 01       	movw	r30, r16
     3d8:	11 92       	st	Z+, r1
     3da:	9a 95       	dec	r25
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <ESP8266_ConnectionMode+0x22>
     3de:	1f 92       	push	r1
     3e0:	8f 93       	push	r24
     3e2:	85 e1       	ldi	r24, 0x15	; 21
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	9f 93       	push	r25
     3e8:	8f 93       	push	r24
     3ea:	1f 93       	push	r17
     3ec:	0f 93       	push	r16
     3ee:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
     3f2:	1c 8a       	std	Y+20, r1	; 0x14
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	0f 90       	pop	r0
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	64 96       	adiw	r28, 0x14	; 20
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	f8 94       	cli
     410:	de bf       	out	0x3e, r29	; 62
     412:	0f be       	out	0x3f, r0	; 63
     414:	cd bf       	out	0x3d, r28	; 61
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <ESP8266_Begin>:
     420:	cf 93       	push	r28
     422:	c0 e0       	ldi	r28, 0x00	; 0
     424:	11 c0       	rjmp	.+34     	; 0x448 <ESP8266_Begin+0x28>
     426:	60 e0       	ldi	r22, 0x00	; 0
     428:	71 e0       	ldi	r23, 0x01	; 1
     42a:	82 e2       	ldi	r24, 0x22	; 34
     42c:	91 e0       	ldi	r25, 0x01	; 1
     42e:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     432:	81 11       	cpse	r24, r1
     434:	0c c0       	rjmp	.+24     	; 0x44e <ESP8266_Begin+0x2e>
     436:	60 e0       	ldi	r22, 0x00	; 0
     438:	71 e0       	ldi	r23, 0x01	; 1
     43a:	87 e2       	ldi	r24, 0x27	; 39
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     442:	81 11       	cpse	r24, r1
     444:	04 c0       	rjmp	.+8      	; 0x44e <ESP8266_Begin+0x2e>
     446:	cf 5f       	subi	r28, 0xFF	; 255
     448:	c5 30       	cpi	r28, 0x05	; 5
     44a:	68 f3       	brcs	.-38     	; 0x426 <ESP8266_Begin+0x6>
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <ESP8266_WIFIMode>:

bool ESP8266_WIFIMode(uint8_t _mode)
{
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	64 97       	sbiw	r28, 0x14	; 20
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     46a:	8e 01       	movw	r16, r28
     46c:	0f 5f       	subi	r16, 0xFF	; 255
     46e:	1f 4f       	sbci	r17, 0xFF	; 255
     470:	94 e1       	ldi	r25, 0x14	; 20
     472:	f8 01       	movw	r30, r16
     474:	11 92       	st	Z+, r1
     476:	9a 95       	dec	r25
     478:	e9 f7       	brne	.-6      	; 0x474 <ESP8266_WIFIMode+0x22>
	sprintf(_atCommand, "AT+CWMODE=%d", _mode);
     47a:	1f 92       	push	r1
     47c:	8f 93       	push	r24
     47e:	88 e3       	ldi	r24, 0x38	; 56
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	1f 93       	push	r17
     488:	0f 93       	push	r16
     48a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
	_atCommand[19] = 0;
     48e:	1c 8a       	std	Y+20, r1	; 0x14
	return SendATandExpectResponse(_atCommand, "\r\nOK\r\n");
     490:	60 e0       	ldi	r22, 0x00	; 0
     492:	71 e0       	ldi	r23, 0x01	; 1
     494:	c8 01       	movw	r24, r16
     496:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     49a:	0f 90       	pop	r0
     49c:	0f 90       	pop	r0
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
}
     4a6:	64 96       	adiw	r28, 0x14	; 20
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <ESP8266_JoinAccessPoint>:

uint8_t ESP8266_JoinAccessPoint(char* _SSID, char* _PASSWORD)
{
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	ec 97       	sbiw	r28, 0x3c	; 60
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     4d4:	8e 01       	movw	r16, r28
     4d6:	0f 5f       	subi	r16, 0xFF	; 255
     4d8:	1f 4f       	sbci	r17, 0xFF	; 255
     4da:	2c e3       	ldi	r18, 0x3C	; 60
     4dc:	f8 01       	movw	r30, r16
     4de:	11 92       	st	Z+, r1
     4e0:	2a 95       	dec	r18
     4e2:	e9 f7       	brne	.-6      	; 0x4de <ESP8266_JoinAccessPoint+0x22>
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
     4e4:	7f 93       	push	r23
     4e6:	6f 93       	push	r22
     4e8:	9f 93       	push	r25
     4ea:	8f 93       	push	r24
     4ec:	85 e4       	ldi	r24, 0x45	; 69
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	1f 93       	push	r17
     4f6:	0f 93       	push	r16
     4f8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
	_atCommand[59] = 0;
     4fc:	1c ae       	std	Y+60, r1	; 0x3c
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
     4fe:	68 e5       	ldi	r22, 0x58	; 88
     500:	71 e0       	ldi	r23, 0x01	; 1
     502:	c8 01       	movw	r24, r16
     504:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
     512:	81 11       	cpse	r24, r1
     514:	22 c0       	rjmp	.+68     	; 0x55a <ESP8266_JoinAccessPoint+0x9e>
	return ESP8266_WIFI_CONNECTED;
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
     516:	6b e6       	ldi	r22, 0x6B	; 107
     518:	71 e0       	ldi	r23, 0x01	; 1
     51a:	84 e9       	ldi	r24, 0x94	; 148
     51c:	92 e0       	ldi	r25, 0x02	; 2
     51e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     522:	89 2b       	or	r24, r25
     524:	e1 f4       	brne	.+56     	; 0x55e <ESP8266_JoinAccessPoint+0xa2>
		return ESP8266_CONNECTION_TIMEOUT;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
     526:	64 e7       	ldi	r22, 0x74	; 116
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	84 e9       	ldi	r24, 0x94	; 148
     52c:	92 e0       	ldi	r25, 0x02	; 2
     52e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     532:	89 2b       	or	r24, r25
     534:	b1 f4       	brne	.+44     	; 0x562 <ESP8266_JoinAccessPoint+0xa6>
		return ESP8266_WRONG_PASSWORD;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
     536:	6d e7       	ldi	r22, 0x7D	; 125
     538:	71 e0       	ldi	r23, 0x01	; 1
     53a:	84 e9       	ldi	r24, 0x94	; 148
     53c:	92 e0       	ldi	r25, 0x02	; 2
     53e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     542:	89 2b       	or	r24, r25
     544:	81 f4       	brne	.+32     	; 0x566 <ESP8266_JoinAccessPoint+0xaa>
		return ESP8266_NOT_FOUND_TARGET_AP;
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
     546:	66 e8       	ldi	r22, 0x86	; 134
     548:	71 e0       	ldi	r23, 0x01	; 1
     54a:	84 e9       	ldi	r24, 0x94	; 148
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     552:	89 2b       	or	r24, r25
     554:	51 f0       	breq	.+20     	; 0x56a <ESP8266_JoinAccessPoint+0xae>
		return ESP8266_CONNECTION_FAILED;
     556:	84 e0       	ldi	r24, 0x04	; 4
     558:	09 c0       	rjmp	.+18     	; 0x56c <ESP8266_JoinAccessPoint+0xb0>
	char _atCommand[60];
	memset(_atCommand, 0, 60);
	sprintf(_atCommand, "AT+CWJAP=\"%s\",\"%s\"", _SSID, _PASSWORD);
	_atCommand[59] = 0;
	if(SendATandExpectResponse(_atCommand, "\r\nWIFI CONNECTED\r\n"))
	return ESP8266_WIFI_CONNECTED;
     55a:	80 e0       	ldi	r24, 0x00	; 0
     55c:	07 c0       	rjmp	.+14     	; 0x56c <ESP8266_JoinAccessPoint+0xb0>
	else{
		if(strstr(RESPONSE_BUFFER, "+CWJAP:1"))
		return ESP8266_CONNECTION_TIMEOUT;
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	05 c0       	rjmp	.+10     	; 0x56c <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:2"))
		return ESP8266_WRONG_PASSWORD;
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	03 c0       	rjmp	.+6      	; 0x56c <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:3"))
		return ESP8266_NOT_FOUND_TARGET_AP;
     566:	83 e0       	ldi	r24, 0x03	; 3
     568:	01 c0       	rjmp	.+2      	; 0x56c <ESP8266_JoinAccessPoint+0xb0>
		else if(strstr(RESPONSE_BUFFER, "+CWJAP:4"))
		return ESP8266_CONNECTION_FAILED;
		else
		return ESP8266_JOIN_UNKNOWN_ERROR;
     56a:	85 e0       	ldi	r24, 0x05	; 5
	}
}
     56c:	ec 96       	adiw	r28, 0x3c	; 60
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	df 91       	pop	r29
     57a:	cf 91       	pop	r28
     57c:	1f 91       	pop	r17
     57e:	0f 91       	pop	r16
     580:	08 95       	ret

00000582 <ESP8266_connected>:

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
     582:	60 e0       	ldi	r22, 0x00	; 0
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	8f e8       	ldi	r24, 0x8F	; 143
     588:	91 e0       	ldi	r25, 0x01	; 1
     58a:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
     58e:	6c e9       	ldi	r22, 0x9C	; 156
     590:	71 e0       	ldi	r23, 0x01	; 1
     592:	84 e9       	ldi	r24, 0x94	; 148
     594:	92 e0       	ldi	r25, 0x02	; 2
     596:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     59a:	89 2b       	or	r24, r25
     59c:	d1 f4       	brne	.+52     	; 0x5d2 <ESP8266_connected+0x50>
	return ESP8266_CONNECTED_TO_AP;
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
     59e:	65 ea       	ldi	r22, 0xA5	; 165
     5a0:	71 e0       	ldi	r23, 0x01	; 1
     5a2:	84 e9       	ldi	r24, 0x94	; 148
     5a4:	92 e0       	ldi	r25, 0x02	; 2
     5a6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     5aa:	89 2b       	or	r24, r25
     5ac:	a1 f4       	brne	.+40     	; 0x5d6 <ESP8266_connected+0x54>
	return ESP8266_CREATED_TRANSMISSION;
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
     5ae:	6e ea       	ldi	r22, 0xAE	; 174
     5b0:	71 e0       	ldi	r23, 0x01	; 1
     5b2:	84 e9       	ldi	r24, 0x94	; 148
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     5ba:	89 2b       	or	r24, r25
     5bc:	71 f4       	brne	.+28     	; 0x5da <ESP8266_connected+0x58>
	return ESP8266_TRANSMISSION_DISCONNECTED;
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
     5be:	67 eb       	ldi	r22, 0xB7	; 183
     5c0:	71 e0       	ldi	r23, 0x01	; 1
     5c2:	84 e9       	ldi	r24, 0x94	; 148
     5c4:	92 e0       	ldi	r25, 0x02	; 2
     5c6:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
     5ca:	89 2b       	or	r24, r25
     5cc:	41 f0       	breq	.+16     	; 0x5de <ESP8266_connected+0x5c>
	return ESP8266_NOT_CONNECTED_TO_AP;
     5ce:	83 e0       	ldi	r24, 0x03	; 3
     5d0:	08 95       	ret

uint8_t ESP8266_connected()
{
	SendATandExpectResponse("AT+CIPSTATUS", "\r\nOK\r\n");
	if(strstr(RESPONSE_BUFFER, "STATUS:2"))
	return ESP8266_CONNECTED_TO_AP;
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:3"))
	return ESP8266_CREATED_TRANSMISSION;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:4"))
	return ESP8266_TRANSMISSION_DISCONNECTED;
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	08 95       	ret
	else if(strstr(RESPONSE_BUFFER, "STATUS:5"))
	return ESP8266_NOT_CONNECTED_TO_AP;
	else
	return ESP8266_CONNECT_UNKNOWN_ERROR;
     5de:	84 e0       	ldi	r24, 0x04	; 4
}
     5e0:	08 95       	ret

000005e2 <ESP8266_Start>:

uint8_t ESP8266_Start(uint8_t _ConnectionNumber, char* Domain, char* Port)
{
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	ec 97       	sbiw	r28, 0x3c	; 60
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	d8 2e       	mov	r13, r24
     602:	16 2f       	mov	r17, r22
     604:	07 2f       	mov	r16, r23
     606:	f4 2e       	mov	r15, r20
     608:	e5 2e       	mov	r14, r21
	bool _startResponse;
	char _atCommand[60];
	memset(_atCommand, 0, 60);
     60a:	fe 01       	movw	r30, r28
     60c:	31 96       	adiw	r30, 0x01	; 1
     60e:	8c e3       	ldi	r24, 0x3C	; 60
     610:	df 01       	movw	r26, r30
     612:	1d 92       	st	X+, r1
     614:	8a 95       	dec	r24
     616:	e9 f7       	brne	.-6      	; 0x612 <ESP8266_Start+0x30>
	_atCommand[59] = 0;

	if(SendATandExpectResponse("AT+CIPMUX?", "CIPMUX:0"))
     618:	60 ec       	ldi	r22, 0xC0	; 192
     61a:	71 e0       	ldi	r23, 0x01	; 1
     61c:	89 ec       	ldi	r24, 0xC9	; 201
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     624:	88 23       	and	r24, r24
     626:	a1 f0       	breq	.+40     	; 0x650 <ESP8266_Start+0x6e>
	sprintf(_atCommand, "AT+CIPSTART=\"TCP\",\"%s\",%s", Domain, Port);
     628:	ef 92       	push	r14
     62a:	ff 92       	push	r15
     62c:	0f 93       	push	r16
     62e:	1f 93       	push	r17
     630:	84 ed       	ldi	r24, 0xD4	; 212
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	9f 93       	push	r25
     636:	8f 93       	push	r24
     638:	ce 01       	movw	r24, r28
     63a:	01 96       	adiw	r24, 0x01	; 1
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
     64e:	15 c0       	rjmp	.+42     	; 0x67a <ESP8266_Start+0x98>
	else
	sprintf(_atCommand, "AT+CIPSTART=\"%d\",\"TCP\",\"%s\",%s", _ConnectionNumber, Domain, Port);
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	1f 92       	push	r1
     65a:	df 92       	push	r13
     65c:	8e ee       	ldi	r24, 0xEE	; 238
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	ce 01       	movw	r24, r28
     666:	01 96       	adiw	r24, 0x01	; 1
     668:	9f 93       	push	r25
     66a:	8f 93       	push	r24
     66c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61

	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
     67a:	6d e0       	ldi	r22, 0x0D	; 13
     67c:	72 e0       	ldi	r23, 0x02	; 2
     67e:	ce 01       	movw	r24, r28
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
	if(!_startResponse)
     686:	81 11       	cpse	r24, r1
     688:	05 c0       	rjmp	.+10     	; 0x694 <ESP8266_Start+0xb2>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     68a:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Response_Status>
     68e:	82 30       	cpi	r24, 0x02	; 2
     690:	19 f4       	brne	.+6      	; 0x698 <ESP8266_Start+0xb6>
     692:	03 c0       	rjmp	.+6      	; 0x69a <ESP8266_Start+0xb8>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	01 c0       	rjmp	.+2      	; 0x69a <ESP8266_Start+0xb8>
	_startResponse = SendATandExpectResponse(_atCommand, "CONNECT\r\n");
	if(!_startResponse)
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     698:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ESP8266_RESPONSE_FINISHED;
}
     69a:	ec 96       	adiw	r28, 0x3c	; 60
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	f8 94       	cli
     6a0:	de bf       	out	0x3e, r29	; 62
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	cd bf       	out	0x3d, r28	; 61
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	0f 91       	pop	r16
     6ae:	ff 90       	pop	r15
     6b0:	ef 90       	pop	r14
     6b2:	df 90       	pop	r13
     6b4:	08 95       	ret

000006b6 <ESP8266_Send>:

uint8_t ESP8266_Send(char* Data)
{
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	64 97       	sbiw	r28, 0x14	; 20
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
     6d2:	8c 01       	movw	r16, r24
	char _atCommand[20];
	memset(_atCommand, 0, 20);
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	7c 01       	movw	r14, r24
     6da:	84 e1       	ldi	r24, 0x14	; 20
     6dc:	f7 01       	movw	r30, r14
     6de:	11 92       	st	Z+, r1
     6e0:	8a 95       	dec	r24
     6e2:	e9 f7       	brne	.-6      	; 0x6de <ESP8266_Send+0x28>
	sprintf(_atCommand, "AT+CIPSEND=%d", (strlen(Data)+2));
     6e4:	f8 01       	movw	r30, r16
     6e6:	01 90       	ld	r0, Z+
     6e8:	00 20       	and	r0, r0
     6ea:	e9 f7       	brne	.-6      	; 0x6e6 <ESP8266_Send+0x30>
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	e0 1b       	sub	r30, r16
     6f0:	f1 0b       	sbc	r31, r17
     6f2:	32 96       	adiw	r30, 0x02	; 2
     6f4:	ff 93       	push	r31
     6f6:	ef 93       	push	r30
     6f8:	87 e1       	ldi	r24, 0x17	; 23
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	ff 92       	push	r15
     702:	ef 92       	push	r14
     704:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
	_atCommand[19] = 0;
     708:	1c 8a       	std	Y+20, r1	; 0x14
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
     70a:	65 e2       	ldi	r22, 0x25	; 37
     70c:	72 e0       	ldi	r23, 0x02	; 2
     70e:	c7 01       	movw	r24, r14
     710:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
     714:	6d e2       	ldi	r22, 0x2D	; 45
     716:	72 e0       	ldi	r23, 0x02	; 2
     718:	c8 01       	movw	r24, r16
     71a:	0e 94 8f 01 	call	0x31e	; 0x31e <SendATandExpectResponse>
     71e:	0f 90       	pop	r0
     720:	0f 90       	pop	r0
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	81 11       	cpse	r24, r1
     72c:	05 c0       	rjmp	.+10     	; 0x738 <ESP8266_Send+0x82>
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
     72e:	80 91 34 03 	lds	r24, 0x0334	; 0x800334 <Response_Status>
     732:	82 30       	cpi	r24, 0x02	; 2
     734:	19 f4       	brne	.+6      	; 0x73c <ESP8266_Send+0x86>
     736:	03 c0       	rjmp	.+6      	; 0x73e <ESP8266_Send+0x88>
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
	}
	return ESP8266_RESPONSE_FINISHED;
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	01 c0       	rjmp	.+2      	; 0x73e <ESP8266_Send+0x88>
	SendATandExpectResponse(_atCommand, "\r\nOK\r\n>");
	if(!SendATandExpectResponse(Data, "\r\nSEND OK\r\n"))
	{
		if(Response_Status == ESP8266_RESPONSE_TIMEOUT)
		return ESP8266_RESPONSE_TIMEOUT;
		return ESP8266_RESPONSE_ERROR;
     73c:	85 e0       	ldi	r24, 0x05	; 5
	}
	return ESP8266_RESPONSE_FINISHED;
}
     73e:	64 96       	adiw	r28, 0x14	; 20
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	08 95       	ret

00000758 <ESP8266_DataAvailable>:

int16_t ESP8266_DataAvailable()
{
	return (Counter - pointer);
     758:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <Counter>
     75c:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <Counter+0x1>
     760:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <pointer>
     764:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <pointer+0x1>
}
     768:	82 1b       	sub	r24, r18
     76a:	93 0b       	sbc	r25, r19
     76c:	08 95       	ret

0000076e <ESP8266_DataRead>:

uint8_t ESP8266_DataRead()
{
	if(pointer < Counter)
     76e:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <pointer>
     772:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <pointer+0x1>
     776:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <Counter>
     77a:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <Counter+0x1>
     77e:	28 17       	cp	r18, r24
     780:	39 07       	cpc	r19, r25
     782:	84 f4       	brge	.+32     	; 0x7a4 <ESP8266_DataRead+0x36>
	return RESPONSE_BUFFER[pointer++];
     784:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <pointer>
     788:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <pointer+0x1>
     78c:	9c 01       	movw	r18, r24
     78e:	2f 5f       	subi	r18, 0xFF	; 255
     790:	3f 4f       	sbci	r19, 0xFF	; 255
     792:	30 93 91 02 	sts	0x0291, r19	; 0x800291 <pointer+0x1>
     796:	20 93 90 02 	sts	0x0290, r18	; 0x800290 <pointer>
     79a:	fc 01       	movw	r30, r24
     79c:	ec 56       	subi	r30, 0x6C	; 108
     79e:	fd 4f       	sbci	r31, 0xFD	; 253
     7a0:	80 81       	ld	r24, Z
     7a2:	08 95       	ret
	else{
		ESP8266_Clear();
     7a4:	0e 94 65 01 	call	0x2ca	; 0x2ca <ESP8266_Clear>
		return 0;
     7a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     7aa:	08 95       	ret

000007ac <__vector_18>:
	splitResponse(_buffer);
	return len;
}

ISR (USART_RX_vect)
{
     7ac:	1f 92       	push	r1
     7ae:	0f 92       	push	r0
     7b0:	0f b6       	in	r0, 0x3f	; 63
     7b2:	0f 92       	push	r0
     7b4:	11 24       	eor	r1, r1
     7b6:	2f 93       	push	r18
     7b8:	8f 93       	push	r24
     7ba:	9f 93       	push	r25
     7bc:	ef 93       	push	r30
     7be:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     7c0:	2f b7       	in	r18, 0x3f	; 63
	cli();
     7c2:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR0;
     7c4:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <Counter>
     7c8:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <Counter+0x1>
     7cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     7d0:	ec 56       	subi	r30, 0x6C	; 108
     7d2:	fd 4f       	sbci	r31, 0xFD	; 253
     7d4:	80 83       	st	Z, r24
	Counter++;
     7d6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <Counter>
     7da:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <Counter+0x1>
     7de:	01 96       	adiw	r24, 0x01	; 1
     7e0:	90 93 93 02 	sts	0x0293, r25	; 0x800293 <Counter+0x1>
     7e4:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
     7e8:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <Counter>
     7ec:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <Counter+0x1>
     7f0:	80 3a       	cpi	r24, 0xA0	; 160
     7f2:	91 05       	cpc	r25, r1
     7f4:	41 f4       	brne	.+16     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
		Counter = 0; pointer = 0;
     7f6:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <Counter+0x1>
     7fa:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <Counter>
     7fe:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <pointer+0x1>
     802:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <pointer>
	}
	SREG = oldsrg;
     806:	2f bf       	out	0x3f, r18	; 63
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	2f 91       	pop	r18
     812:	0f 90       	pop	r0
     814:	0f be       	out	0x3f, r0	; 63
     816:	0f 90       	pop	r0
     818:	1f 90       	pop	r1
     81a:	18 95       	reti

0000081c <setPin>:
		Read_Data(_buffer);
	}
}

void setPin(char port, int pin,int state){
	switch(port){
     81c:	83 34       	cpi	r24, 0x43	; 67
     81e:	f9 f0       	breq	.+62     	; 0x85e <setPin+0x42>
     820:	84 34       	cpi	r24, 0x44	; 68
     822:	b9 f1       	breq	.+110    	; 0x892 <setPin+0x76>
     824:	82 34       	cpi	r24, 0x42	; 66
     826:	09 f0       	breq	.+2      	; 0x82a <setPin+0xe>
     828:	4e c0       	rjmp	.+156    	; 0x8c6 <setPin+0xaa>
		case 'B':
			if (state==1){
     82a:	41 30       	cpi	r20, 0x01	; 1
     82c:	51 05       	cpc	r21, r1
     82e:	59 f4       	brne	.+22     	; 0x846 <setPin+0x2a>
				DDRB |= (1<<pin);
     830:	24 b1       	in	r18, 0x04	; 4
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	02 c0       	rjmp	.+4      	; 0x83c <setPin+0x20>
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	6a 95       	dec	r22
     83e:	e2 f7       	brpl	.-8      	; 0x838 <setPin+0x1c>
     840:	82 2b       	or	r24, r18
     842:	84 b9       	out	0x04, r24	; 4
     844:	08 95       	ret
			}else{
				DDRB &= ~(1<<pin);
     846:	24 b1       	in	r18, 0x04	; 4
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 c0       	rjmp	.+4      	; 0x852 <setPin+0x36>
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	6a 95       	dec	r22
     854:	e2 f7       	brpl	.-8      	; 0x84e <setPin+0x32>
     856:	80 95       	com	r24
     858:	82 23       	and	r24, r18
     85a:	84 b9       	out	0x04, r24	; 4
     85c:	08 95       	ret
			}
			break;
		case 'C':
			if(state==1){
     85e:	41 30       	cpi	r20, 0x01	; 1
     860:	51 05       	cpc	r21, r1
     862:	59 f4       	brne	.+22     	; 0x87a <setPin+0x5e>
				DDRC |= (1<<pin);
     864:	27 b1       	in	r18, 0x07	; 7
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	02 c0       	rjmp	.+4      	; 0x870 <setPin+0x54>
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	6a 95       	dec	r22
     872:	e2 f7       	brpl	.-8      	; 0x86c <setPin+0x50>
     874:	82 2b       	or	r24, r18
     876:	87 b9       	out	0x07, r24	; 7
     878:	08 95       	ret
			}else{
				DDRC &= ~(1<<pin);
     87a:	27 b1       	in	r18, 0x07	; 7
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <setPin+0x6a>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	6a 95       	dec	r22
     888:	e2 f7       	brpl	.-8      	; 0x882 <setPin+0x66>
     88a:	80 95       	com	r24
     88c:	82 23       	and	r24, r18
     88e:	87 b9       	out	0x07, r24	; 7
     890:	08 95       	ret
			}
			break;
		case 'D':
			if(state==1){
     892:	41 30       	cpi	r20, 0x01	; 1
     894:	51 05       	cpc	r21, r1
     896:	59 f4       	brne	.+22     	; 0x8ae <setPin+0x92>
				DDRD |= (1<<pin);
     898:	2a b1       	in	r18, 0x0a	; 10
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <setPin+0x88>
     8a0:	88 0f       	add	r24, r24
     8a2:	99 1f       	adc	r25, r25
     8a4:	6a 95       	dec	r22
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <setPin+0x84>
     8a8:	82 2b       	or	r24, r18
     8aa:	8a b9       	out	0x0a, r24	; 10
     8ac:	08 95       	ret
			}else{
			DDRD &= ~(1<<pin);
     8ae:	2a b1       	in	r18, 0x0a	; 10
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <setPin+0x9e>
     8b6:	88 0f       	add	r24, r24
     8b8:	99 1f       	adc	r25, r25
     8ba:	6a 95       	dec	r22
     8bc:	e2 f7       	brpl	.-8      	; 0x8b6 <setPin+0x9a>
     8be:	80 95       	com	r24
     8c0:	82 23       	and	r24, r18
     8c2:	8a b9       	out	0x0a, r24	; 10
     8c4:	08 95       	ret
			}
		break;
		default:
			DDRB = 0xFF;
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	84 b9       	out	0x04, r24	; 4
     8ca:	08 95       	ret

000008cc <pwm>:
	}
}
void pwm(int pin,int num){
     8cc:	cf 93       	push	r28
     8ce:	9c 01       	movw	r18, r24
     8d0:	c6 2f       	mov	r28, r22
	TCCR0B |= (1<<CS00)|(1<<CS01);
     8d2:	95 b5       	in	r25, 0x25	; 37
     8d4:	93 60       	ori	r25, 0x03	; 3
     8d6:	95 bd       	out	0x25, r25	; 37
	TCCR2B |= (1<<CS20)|(1<<CS21);
     8d8:	e1 eb       	ldi	r30, 0xB1	; 177
     8da:	f0 e0       	ldi	r31, 0x00	; 0
     8dc:	90 81       	ld	r25, Z
     8de:	93 60       	ori	r25, 0x03	; 3
     8e0:	90 83       	st	Z, r25
	
	switch(pin){
     8e2:	21 30       	cpi	r18, 0x01	; 1
     8e4:	31 05       	cpc	r19, r1
     8e6:	89 f0       	breq	.+34     	; 0x90a <__stack+0xb>
     8e8:	22 30       	cpi	r18, 0x02	; 2
     8ea:	31 05       	cpc	r19, r1
     8ec:	d1 f0       	breq	.+52     	; 0x922 <__stack+0x23>
     8ee:	23 2b       	or	r18, r19
     8f0:	31 f5       	brne	.+76     	; 0x93e <__stack+0x3f>
		case 0:
			TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0A1);
     8f2:	84 b5       	in	r24, 0x24	; 36
     8f4:	83 68       	ori	r24, 0x83	; 131
     8f6:	84 bd       	out	0x24, r24	; 36
			setPin('D',6,1);
     8f8:	41 e0       	ldi	r20, 0x01	; 1
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	66 e0       	ldi	r22, 0x06	; 6
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	84 e4       	ldi	r24, 0x44	; 68
     902:	0e 94 0e 04 	call	0x81c	; 0x81c <setPin>
			OCR0A = num;
     906:	c7 bd       	out	0x27, r28	; 39
			break;
     908:	1a c0       	rjmp	.+52     	; 0x93e <__stack+0x3f>
		case 1:
			TCCR0A |= (1<<WGM01)|(1<<WGM00)|(1<<COM0B1);
     90a:	84 b5       	in	r24, 0x24	; 36
     90c:	83 62       	ori	r24, 0x23	; 35
     90e:	84 bd       	out	0x24, r24	; 36
			setPin('D',5,1);
     910:	41 e0       	ldi	r20, 0x01	; 1
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	65 e0       	ldi	r22, 0x05	; 5
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	84 e4       	ldi	r24, 0x44	; 68
     91a:	0e 94 0e 04 	call	0x81c	; 0x81c <setPin>
			OCR0B = num;
     91e:	c8 bd       	out	0x28, r28	; 40
			break;
     920:	0e c0       	rjmp	.+28     	; 0x93e <__stack+0x3f>
		case 2:
			TCCR2A |= (1<<WGM21)|(1<<WGM20)|(1<<COM2A1);
     922:	e0 eb       	ldi	r30, 0xB0	; 176
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	80 81       	ld	r24, Z
     928:	83 68       	ori	r24, 0x83	; 131
     92a:	80 83       	st	Z, r24
			setPin('B',3,1);
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	63 e0       	ldi	r22, 0x03	; 3
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	82 e4       	ldi	r24, 0x42	; 66
     936:	0e 94 0e 04 	call	0x81c	; 0x81c <setPin>
			OCR2A = num;
     93a:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			break;
		
	}
}
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <splitResponse>:
void splitResponse(char *_buffer){
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	2c 97       	sbiw	r28, 0x0c	; 12
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	8c 01       	movw	r16, r24
	char*busca = NULL;
	char r[4];
	char g[4];
	char b[4];
	USART_SendString(_buffer);
     95c:	0e 94 67 00 	call	0xce	; 0xce <USART_SendString>
	
	busca = strstr(_buffer,"+IPD,");
     960:	69 e3       	ldi	r22, 0x39	; 57
     962:	72 e0       	ldi	r23, 0x02	; 2
     964:	c8 01       	movw	r24, r16
     966:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strstr>
	if (busca!=NULL){
     96a:	89 2b       	or	r24, r25
     96c:	09 f0       	breq	.+2      	; 0x970 <splitResponse+0x2e>
     96e:	67 c0       	rjmp	.+206    	; 0xa3e <splitResponse+0xfc>
     970:	92 c0       	rjmp	.+292    	; 0xa96 <splitResponse+0x154>
		int flag = 0,conta=0;
		for(int i=0;i<strlen(_buffer);i++){
			
			if(_buffer[i]=='"' && flag ==0){
     972:	f8 01       	movw	r30, r16
     974:	e2 0f       	add	r30, r18
     976:	f3 1f       	adc	r31, r19
     978:	40 81       	ld	r20, Z
     97a:	42 32       	cpi	r20, 0x22	; 34
     97c:	19 f4       	brne	.+6      	; 0x984 <splitResponse+0x42>
     97e:	00 97       	sbiw	r24, 0x00	; 0
     980:	09 f4       	brne	.+2      	; 0x984 <splitResponse+0x42>
				flag++;
     982:	01 96       	adiw	r24, 0x01	; 1
			}
			
			if(flag==1 && _buffer[i]<='9' && _buffer[i]>='0'){
     984:	81 30       	cpi	r24, 0x01	; 1
     986:	91 05       	cpc	r25, r1
     988:	69 f4       	brne	.+26     	; 0x9a4 <splitResponse+0x62>
     98a:	4a 33       	cpi	r20, 0x3A	; 58
     98c:	58 f4       	brcc	.+22     	; 0x9a4 <splitResponse+0x62>
     98e:	40 33       	cpi	r20, 0x30	; 48
     990:	48 f0       	brcs	.+18     	; 0x9a4 <splitResponse+0x62>
				r[conta]=_buffer[i];
     992:	a1 e0       	ldi	r26, 0x01	; 1
     994:	b0 e0       	ldi	r27, 0x00	; 0
     996:	ac 0f       	add	r26, r28
     998:	bd 1f       	adc	r27, r29
     99a:	a6 0f       	add	r26, r22
     99c:	b7 1f       	adc	r27, r23
     99e:	4c 93       	st	X, r20
				conta++;
     9a0:	6f 5f       	subi	r22, 0xFF	; 255
     9a2:	7f 4f       	sbci	r23, 0xFF	; 255
			}
			
			if(flag==2 && _buffer[i]<='9' && _buffer[i]>='0'){
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	91 05       	cpc	r25, r1
     9a8:	71 f4       	brne	.+28     	; 0x9c6 <splitResponse+0x84>
     9aa:	40 81       	ld	r20, Z
     9ac:	4a 33       	cpi	r20, 0x3A	; 58
     9ae:	58 f4       	brcc	.+22     	; 0x9c6 <splitResponse+0x84>
     9b0:	40 33       	cpi	r20, 0x30	; 48
     9b2:	48 f0       	brcs	.+18     	; 0x9c6 <splitResponse+0x84>
				g[conta]=_buffer[i];
     9b4:	a5 e0       	ldi	r26, 0x05	; 5
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	ac 0f       	add	r26, r28
     9ba:	bd 1f       	adc	r27, r29
     9bc:	a6 0f       	add	r26, r22
     9be:	b7 1f       	adc	r27, r23
     9c0:	4c 93       	st	X, r20
				conta++;
     9c2:	6f 5f       	subi	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
			}
			
			if(flag==3 && _buffer[i]<='9' && _buffer[i]>='0'){
     9c6:	83 30       	cpi	r24, 0x03	; 3
     9c8:	91 05       	cpc	r25, r1
     9ca:	71 f4       	brne	.+28     	; 0x9e8 <splitResponse+0xa6>
     9cc:	40 81       	ld	r20, Z
     9ce:	4a 33       	cpi	r20, 0x3A	; 58
     9d0:	58 f4       	brcc	.+22     	; 0x9e8 <splitResponse+0xa6>
     9d2:	40 33       	cpi	r20, 0x30	; 48
     9d4:	48 f0       	brcs	.+18     	; 0x9e8 <splitResponse+0xa6>
				b[conta]=_buffer[i];
     9d6:	a9 e0       	ldi	r26, 0x09	; 9
     9d8:	b0 e0       	ldi	r27, 0x00	; 0
     9da:	ac 0f       	add	r26, r28
     9dc:	bd 1f       	adc	r27, r29
     9de:	a6 0f       	add	r26, r22
     9e0:	b7 1f       	adc	r27, r23
     9e2:	4c 93       	st	X, r20
				conta++;
     9e4:	6f 5f       	subi	r22, 0xFF	; 255
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
			}
			if (_buffer[i]==',' || _buffer[i]=='"'){
     9e8:	40 81       	ld	r20, Z
     9ea:	4c 32       	cpi	r20, 0x2C	; 44
     9ec:	11 f0       	breq	.+4      	; 0x9f2 <splitResponse+0xb0>
     9ee:	42 32       	cpi	r20, 0x22	; 34
     9f0:	19 f5       	brne	.+70     	; 0xa38 <splitResponse+0xf6>
				switch(flag){
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	91 05       	cpc	r25, r1
     9f6:	71 f0       	breq	.+28     	; 0xa14 <splitResponse+0xd2>
     9f8:	83 30       	cpi	r24, 0x03	; 3
     9fa:	91 05       	cpc	r25, r1
     9fc:	99 f0       	breq	.+38     	; 0xa24 <splitResponse+0xe2>
     9fe:	81 30       	cpi	r24, 0x01	; 1
     a00:	91 05       	cpc	r25, r1
     a02:	b9 f4       	brne	.+46     	; 0xa32 <splitResponse+0xf0>
					case 1:
					r[conta]='\0';
     a04:	e1 e0       	ldi	r30, 0x01	; 1
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	ec 0f       	add	r30, r28
     a0a:	fd 1f       	adc	r31, r29
     a0c:	e6 0f       	add	r30, r22
     a0e:	f7 1f       	adc	r31, r23
     a10:	10 82       	st	Z, r1
					break;
     a12:	0f c0       	rjmp	.+30     	; 0xa32 <splitResponse+0xf0>
					case 2:
					g[conta]='\0';
     a14:	e5 e0       	ldi	r30, 0x05	; 5
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	ec 0f       	add	r30, r28
     a1a:	fd 1f       	adc	r31, r29
     a1c:	e6 0f       	add	r30, r22
     a1e:	f7 1f       	adc	r31, r23
     a20:	10 82       	st	Z, r1
					break;
     a22:	07 c0       	rjmp	.+14     	; 0xa32 <splitResponse+0xf0>
					case 3:
					b[conta]='\0';
     a24:	e9 e0       	ldi	r30, 0x09	; 9
     a26:	f0 e0       	ldi	r31, 0x00	; 0
     a28:	ec 0f       	add	r30, r28
     a2a:	fd 1f       	adc	r31, r29
     a2c:	e6 0f       	add	r30, r22
     a2e:	f7 1f       	adc	r31, r23
     a30:	10 82       	st	Z, r1
					break;
				}
				conta=0;
				flag++;
     a32:	01 96       	adiw	r24, 0x01	; 1
					break;
					case 3:
					b[conta]='\0';
					break;
				}
				conta=0;
     a34:	60 e0       	ldi	r22, 0x00	; 0
     a36:	70 e0       	ldi	r23, 0x00	; 0
	USART_SendString(_buffer);
	
	busca = strstr(_buffer,"+IPD,");
	if (busca!=NULL){
		int flag = 0,conta=0;
		for(int i=0;i<strlen(_buffer);i++){
     a38:	2f 5f       	subi	r18, 0xFF	; 255
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <splitResponse+0x108>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	f8 01       	movw	r30, r16
     a4c:	01 90       	ld	r0, Z+
     a4e:	00 20       	and	r0, r0
     a50:	e9 f7       	brne	.-6      	; 0xa4c <splitResponse+0x10a>
     a52:	31 97       	sbiw	r30, 0x01	; 1
     a54:	e0 1b       	sub	r30, r16
     a56:	f1 0b       	sbc	r31, r17
     a58:	2e 17       	cp	r18, r30
     a5a:	3f 07       	cpc	r19, r31
     a5c:	08 f4       	brcc	.+2      	; 0xa60 <splitResponse+0x11e>
     a5e:	89 cf       	rjmp	.-238    	; 0x972 <splitResponse+0x30>
				}
				conta=0;
				flag++;
			}
		}
		pwm(0,atoi(r));
     a60:	ce 01       	movw	r24, r28
     a62:	01 96       	adiw	r24, 0x01	; 1
     a64:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
     a68:	bc 01       	movw	r22, r24
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	0e 94 66 04 	call	0x8cc	; 0x8cc <pwm>
		pwm(1,atoi(g));
     a72:	ce 01       	movw	r24, r28
     a74:	05 96       	adiw	r24, 0x05	; 5
     a76:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
     a7a:	bc 01       	movw	r22, r24
     a7c:	81 e0       	ldi	r24, 0x01	; 1
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 66 04 	call	0x8cc	; 0x8cc <pwm>
		pwm(2,atoi(b));
     a84:	ce 01       	movw	r24, r28
     a86:	09 96       	adiw	r24, 0x09	; 9
     a88:	0e 94 e6 05 	call	0xbcc	; 0xbcc <atoi>
     a8c:	bc 01       	movw	r22, r24
     a8e:	82 e0       	ldi	r24, 0x02	; 2
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	0e 94 66 04 	call	0x8cc	; 0x8cc <pwm>
		
	}
	
}
     a96:	2c 96       	adiw	r28, 0x0c	; 12
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	f8 94       	cli
     a9c:	de bf       	out	0x3e, r29	; 62
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	cd bf       	out	0x3d, r28	; 61
     aa2:	df 91       	pop	r29
     aa4:	cf 91       	pop	r28
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	08 95       	ret

00000aac <Read_Data>:
		return 0;
	}
}

uint16_t Read_Data(char* _buffer)
{
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	7c 01       	movw	r14, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     aba:	2f e7       	ldi	r18, 0x7F	; 127
     abc:	89 ea       	ldi	r24, 0xA9	; 169
     abe:	93 e0       	ldi	r25, 0x03	; 3
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	80 40       	sbci	r24, 0x00	; 0
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <Read_Data+0x14>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <Read_Data+0x1e>
     aca:	00 00       	nop
	uint16_t len = 0;
     acc:	c0 e0       	ldi	r28, 0x00	; 0
     ace:	d0 e0       	ldi	r29, 0x00	; 0
     ad0:	09 c0       	rjmp	.+18     	; 0xae4 <Read_Data+0x38>
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
     ad2:	8e 01       	movw	r16, r28
     ad4:	0f 5f       	subi	r16, 0xFF	; 255
     ad6:	1f 4f       	sbci	r17, 0xFF	; 255
     ad8:	ce 0d       	add	r28, r14
     ada:	df 1d       	adc	r29, r15
     adc:	0e 94 b7 03 	call	0x76e	; 0x76e <ESP8266_DataRead>
     ae0:	88 83       	st	Y, r24
     ae2:	e8 01       	movw	r28, r16

uint16_t Read_Data(char* _buffer)
{
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
     ae4:	0e 94 ac 03 	call	0x758	; 0x758 <ESP8266_DataAvailable>
     ae8:	18 16       	cp	r1, r24
     aea:	19 06       	cpc	r1, r25
     aec:	94 f3       	brlt	.-28     	; 0xad2 <Read_Data+0x26>
	_buffer[len++] = ESP8266_DataRead();
	splitResponse(_buffer);
     aee:	c7 01       	movw	r24, r14
     af0:	0e 94 a1 04 	call	0x942	; 0x942 <splitResponse>
	return len;
}
     af4:	ce 01       	movw	r24, r28
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	1f 91       	pop	r17
     afc:	0f 91       	pop	r16
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	08 95       	ret

00000b04 <main>:
	}
	SREG = oldsrg;
}

int main(void)
{
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	cd b7       	in	r28, 0x3d	; 61
     b0a:	de b7       	in	r29, 0x3e	; 62
     b0c:	c6 59       	subi	r28, 0x96	; 150
     b0e:	d1 09       	sbc	r29, r1
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
	char _buffer[150];
	uint8_t Connect_Status;

	USART_Init();						/* Initiate USART with 115200 baud rate */
     b1a:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
	sei();									/* Start global interrupt */
     b1e:	78 94       	sei

	while(!ESP8266_Begin());
     b20:	0e 94 10 02 	call	0x420	; 0x420 <ESP8266_Begin>
     b24:	88 23       	and	r24, r24
     b26:	e1 f3       	breq	.-8      	; 0xb20 <main+0x1c>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);/* 3 = Both (AP and STA) */
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	0e 94 29 02 	call	0x452	; 0x452 <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);			/* 0 = Single; 1 = Multi */
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	0e 94 db 01 	call	0x3b6	; 0x3b6 <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);		/* 0 = Normal Mode; 1 = Transperant Mode */
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	0e 94 a6 01 	call	0x34c	; 0x34c <ESP8266_ApplicationMode>
	if(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)
     b3a:	0e 94 c1 02 	call	0x582	; 0x582 <ESP8266_connected>
     b3e:	83 30       	cpi	r24, 0x03	; 3
     b40:	31 f4       	brne	.+12     	; 0xb4e <main+0x4a>
	ESP8266_JoinAccessPoint(SSID, PASSWORD);
     b42:	6f e3       	ldi	r22, 0x3F	; 63
     b44:	72 e0       	ldi	r23, 0x02	; 2
     b46:	88 e4       	ldi	r24, 0x48	; 72
     b48:	92 e0       	ldi	r25, 0x02	; 2
     b4a:	0e 94 5e 02 	call	0x4bc	; 0x4bc <ESP8266_JoinAccessPoint>
	ESP8266_Start(0, DOMAIN, PORT);
     b4e:	45 e5       	ldi	r20, 0x55	; 85
     b50:	52 e0       	ldi	r21, 0x02	; 2
     b52:	6a e5       	ldi	r22, 0x5A	; 90
     b54:	72 e0       	ldi	r23, 0x02	; 2
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <ESP8266_Start>
	while(1)
	{
		Connect_Status = ESP8266_connected();
     b5c:	0e 94 c1 02 	call	0x582	; 0x582 <ESP8266_connected>
     b60:	18 2f       	mov	r17, r24
		if(Connect_Status == ESP8266_NOT_CONNECTED_TO_AP)
     b62:	83 30       	cpi	r24, 0x03	; 3
     b64:	31 f4       	brne	.+12     	; 0xb72 <main+0x6e>
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     b66:	6f e3       	ldi	r22, 0x3F	; 63
     b68:	72 e0       	ldi	r23, 0x02	; 2
     b6a:	88 e4       	ldi	r24, 0x48	; 72
     b6c:	92 e0       	ldi	r25, 0x02	; 2
     b6e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <ESP8266_JoinAccessPoint>
		if(Connect_Status == ESP8266_TRANSMISSION_DISCONNECTED)
     b72:	12 30       	cpi	r17, 0x02	; 2
     b74:	39 f4       	brne	.+14     	; 0xb84 <main+0x80>
		ESP8266_Start(0, DOMAIN, PORT);
     b76:	45 e5       	ldi	r20, 0x55	; 85
     b78:	52 e0       	ldi	r21, 0x02	; 2
     b7a:	6a e5       	ldi	r22, 0x5A	; 90
     b7c:	72 e0       	ldi	r23, 0x02	; 2
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <ESP8266_Start>
		
		memset(_buffer, 0, 150);
     b84:	8e 01       	movw	r16, r28
     b86:	0f 5f       	subi	r16, 0xFF	; 255
     b88:	1f 4f       	sbci	r17, 0xFF	; 255
     b8a:	86 e9       	ldi	r24, 0x96	; 150
     b8c:	f8 01       	movw	r30, r16
     b8e:	11 92       	st	Z+, r1
     b90:	8a 95       	dec	r24
     b92:	e9 f7       	brne	.-6      	; 0xb8e <main+0x8a>
		sprintf(_buffer, "GET /color\r\nHTTP/1.1\r\nHost: %s:%s\r\n\r\n",DOMAIN,PORT);
     b94:	85 e5       	ldi	r24, 0x55	; 85
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	9f 93       	push	r25
     b9a:	8f 93       	push	r24
     b9c:	8a e5       	ldi	r24, 0x5A	; 90
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	9f 93       	push	r25
     ba2:	8f 93       	push	r24
     ba4:	86 e6       	ldi	r24, 0x66	; 102
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	1f 93       	push	r17
     bae:	0f 93       	push	r16
     bb0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <sprintf>
		ESP8266_Send(_buffer);
     bb4:	c8 01       	movw	r24, r16
     bb6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <ESP8266_Send>
		Read_Data(_buffer);
     bba:	c8 01       	movw	r24, r16
     bbc:	0e 94 56 05 	call	0xaac	; 0xaac <Read_Data>
	}
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	c8 cf       	rjmp	.-112    	; 0xb5c <main+0x58>

00000bcc <atoi>:
     bcc:	fc 01       	movw	r30, r24
     bce:	88 27       	eor	r24, r24
     bd0:	99 27       	eor	r25, r25
     bd2:	e8 94       	clt
     bd4:	21 91       	ld	r18, Z+
     bd6:	20 32       	cpi	r18, 0x20	; 32
     bd8:	e9 f3       	breq	.-6      	; 0xbd4 <atoi+0x8>
     bda:	29 30       	cpi	r18, 0x09	; 9
     bdc:	10 f0       	brcs	.+4      	; 0xbe2 <atoi+0x16>
     bde:	2e 30       	cpi	r18, 0x0E	; 14
     be0:	c8 f3       	brcs	.-14     	; 0xbd4 <atoi+0x8>
     be2:	2b 32       	cpi	r18, 0x2B	; 43
     be4:	41 f0       	breq	.+16     	; 0xbf6 <atoi+0x2a>
     be6:	2d 32       	cpi	r18, 0x2D	; 45
     be8:	39 f4       	brne	.+14     	; 0xbf8 <atoi+0x2c>
     bea:	68 94       	set
     bec:	04 c0       	rjmp	.+8      	; 0xbf6 <atoi+0x2a>
     bee:	0e 94 47 06 	call	0xc8e	; 0xc8e <__mulhi_const_10>
     bf2:	82 0f       	add	r24, r18
     bf4:	91 1d       	adc	r25, r1
     bf6:	21 91       	ld	r18, Z+
     bf8:	20 53       	subi	r18, 0x30	; 48
     bfa:	2a 30       	cpi	r18, 0x0A	; 10
     bfc:	c0 f3       	brcs	.-16     	; 0xbee <atoi+0x22>
     bfe:	1e f4       	brtc	.+6      	; 0xc06 <atoi+0x3a>
     c00:	90 95       	com	r25
     c02:	81 95       	neg	r24
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	08 95       	ret

00000c08 <memcpy>:
     c08:	fb 01       	movw	r30, r22
     c0a:	dc 01       	movw	r26, r24
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <memcpy+0xa>
     c0e:	01 90       	ld	r0, Z+
     c10:	0d 92       	st	X+, r0
     c12:	41 50       	subi	r20, 0x01	; 1
     c14:	50 40       	sbci	r21, 0x00	; 0
     c16:	d8 f7       	brcc	.-10     	; 0xc0e <memcpy+0x6>
     c18:	08 95       	ret

00000c1a <memmove>:
     c1a:	68 17       	cp	r22, r24
     c1c:	79 07       	cpc	r23, r25
     c1e:	68 f4       	brcc	.+26     	; 0xc3a <memmove+0x20>
     c20:	fb 01       	movw	r30, r22
     c22:	dc 01       	movw	r26, r24
     c24:	e4 0f       	add	r30, r20
     c26:	f5 1f       	adc	r31, r21
     c28:	a4 0f       	add	r26, r20
     c2a:	b5 1f       	adc	r27, r21
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <memmove+0x18>
     c2e:	02 90       	ld	r0, -Z
     c30:	0e 92       	st	-X, r0
     c32:	41 50       	subi	r20, 0x01	; 1
     c34:	50 40       	sbci	r21, 0x00	; 0
     c36:	d8 f7       	brcc	.-10     	; 0xc2e <memmove+0x14>
     c38:	08 95       	ret
     c3a:	0c 94 04 06 	jmp	0xc08	; 0xc08 <memcpy>

00000c3e <strncmp>:
     c3e:	fb 01       	movw	r30, r22
     c40:	dc 01       	movw	r26, r24
     c42:	41 50       	subi	r20, 0x01	; 1
     c44:	50 40       	sbci	r21, 0x00	; 0
     c46:	30 f0       	brcs	.+12     	; 0xc54 <strncmp+0x16>
     c48:	8d 91       	ld	r24, X+
     c4a:	01 90       	ld	r0, Z+
     c4c:	80 19       	sub	r24, r0
     c4e:	19 f4       	brne	.+6      	; 0xc56 <strncmp+0x18>
     c50:	00 20       	and	r0, r0
     c52:	b9 f7       	brne	.-18     	; 0xc42 <strncmp+0x4>
     c54:	88 1b       	sub	r24, r24
     c56:	99 0b       	sbc	r25, r25
     c58:	08 95       	ret

00000c5a <strstr>:
     c5a:	fb 01       	movw	r30, r22
     c5c:	51 91       	ld	r21, Z+
     c5e:	55 23       	and	r21, r21
     c60:	a9 f0       	breq	.+42     	; 0xc8c <strstr+0x32>
     c62:	bf 01       	movw	r22, r30
     c64:	dc 01       	movw	r26, r24
     c66:	4d 91       	ld	r20, X+
     c68:	45 17       	cp	r20, r21
     c6a:	41 11       	cpse	r20, r1
     c6c:	e1 f7       	brne	.-8      	; 0xc66 <strstr+0xc>
     c6e:	59 f4       	brne	.+22     	; 0xc86 <strstr+0x2c>
     c70:	cd 01       	movw	r24, r26
     c72:	01 90       	ld	r0, Z+
     c74:	00 20       	and	r0, r0
     c76:	49 f0       	breq	.+18     	; 0xc8a <strstr+0x30>
     c78:	4d 91       	ld	r20, X+
     c7a:	40 15       	cp	r20, r0
     c7c:	41 11       	cpse	r20, r1
     c7e:	c9 f3       	breq	.-14     	; 0xc72 <strstr+0x18>
     c80:	fb 01       	movw	r30, r22
     c82:	41 11       	cpse	r20, r1
     c84:	ef cf       	rjmp	.-34     	; 0xc64 <strstr+0xa>
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	08 95       	ret

00000c8e <__mulhi_const_10>:
     c8e:	7a e0       	ldi	r23, 0x0A	; 10
     c90:	97 9f       	mul	r25, r23
     c92:	90 2d       	mov	r25, r0
     c94:	87 9f       	mul	r24, r23
     c96:	80 2d       	mov	r24, r0
     c98:	91 0d       	add	r25, r1
     c9a:	11 24       	eor	r1, r1
     c9c:	08 95       	ret

00000c9e <sprintf>:
     c9e:	ae e0       	ldi	r26, 0x0E	; 14
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e5 e5       	ldi	r30, 0x55	; 85
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	0c 94 10 09 	jmp	0x1220	; 0x1220 <__prologue_saves__+0x1c>
     caa:	0d 89       	ldd	r16, Y+21	; 0x15
     cac:	1e 89       	ldd	r17, Y+22	; 0x16
     cae:	86 e0       	ldi	r24, 0x06	; 6
     cb0:	8c 83       	std	Y+4, r24	; 0x04
     cb2:	1a 83       	std	Y+2, r17	; 0x02
     cb4:	09 83       	std	Y+1, r16	; 0x01
     cb6:	8f ef       	ldi	r24, 0xFF	; 255
     cb8:	9f e7       	ldi	r25, 0x7F	; 127
     cba:	9e 83       	std	Y+6, r25	; 0x06
     cbc:	8d 83       	std	Y+5, r24	; 0x05
     cbe:	ae 01       	movw	r20, r28
     cc0:	47 5e       	subi	r20, 0xE7	; 231
     cc2:	5f 4f       	sbci	r21, 0xFF	; 255
     cc4:	6f 89       	ldd	r22, Y+23	; 0x17
     cc6:	78 8d       	ldd	r23, Y+24	; 0x18
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 71 06 	call	0xce2	; 0xce2 <vfprintf>
     cd0:	ef 81       	ldd	r30, Y+7	; 0x07
     cd2:	f8 85       	ldd	r31, Y+8	; 0x08
     cd4:	e0 0f       	add	r30, r16
     cd6:	f1 1f       	adc	r31, r17
     cd8:	10 82       	st	Z, r1
     cda:	2e 96       	adiw	r28, 0x0e	; 14
     cdc:	e4 e0       	ldi	r30, 0x04	; 4
     cde:	0c 94 2c 09 	jmp	0x1258	; 0x1258 <__epilogue_restores__+0x1c>

00000ce2 <vfprintf>:
     ce2:	ab e0       	ldi	r26, 0x0B	; 11
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e7       	ldi	r30, 0x77	; 119
     ce8:	f6 e0       	ldi	r31, 0x06	; 6
     cea:	0c 94 02 09 	jmp	0x1204	; 0x1204 <__prologue_saves__>
     cee:	6c 01       	movw	r12, r24
     cf0:	7b 01       	movw	r14, r22
     cf2:	8a 01       	movw	r16, r20
     cf4:	fc 01       	movw	r30, r24
     cf6:	17 82       	std	Z+7, r1	; 0x07
     cf8:	16 82       	std	Z+6, r1	; 0x06
     cfa:	83 81       	ldd	r24, Z+3	; 0x03
     cfc:	81 ff       	sbrs	r24, 1
     cfe:	cc c1       	rjmp	.+920    	; 0x1098 <vfprintf+0x3b6>
     d00:	ce 01       	movw	r24, r28
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	3c 01       	movw	r6, r24
     d06:	f6 01       	movw	r30, r12
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	f7 01       	movw	r30, r14
     d0c:	93 fd       	sbrc	r25, 3
     d0e:	85 91       	lpm	r24, Z+
     d10:	93 ff       	sbrs	r25, 3
     d12:	81 91       	ld	r24, Z+
     d14:	7f 01       	movw	r14, r30
     d16:	88 23       	and	r24, r24
     d18:	09 f4       	brne	.+2      	; 0xd1c <vfprintf+0x3a>
     d1a:	ba c1       	rjmp	.+884    	; 0x1090 <vfprintf+0x3ae>
     d1c:	85 32       	cpi	r24, 0x25	; 37
     d1e:	39 f4       	brne	.+14     	; 0xd2e <vfprintf+0x4c>
     d20:	93 fd       	sbrc	r25, 3
     d22:	85 91       	lpm	r24, Z+
     d24:	93 ff       	sbrs	r25, 3
     d26:	81 91       	ld	r24, Z+
     d28:	7f 01       	movw	r14, r30
     d2a:	85 32       	cpi	r24, 0x25	; 37
     d2c:	29 f4       	brne	.+10     	; 0xd38 <vfprintf+0x56>
     d2e:	b6 01       	movw	r22, r12
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     d36:	e7 cf       	rjmp	.-50     	; 0xd06 <vfprintf+0x24>
     d38:	91 2c       	mov	r9, r1
     d3a:	21 2c       	mov	r2, r1
     d3c:	31 2c       	mov	r3, r1
     d3e:	ff e1       	ldi	r31, 0x1F	; 31
     d40:	f3 15       	cp	r31, r3
     d42:	d8 f0       	brcs	.+54     	; 0xd7a <vfprintf+0x98>
     d44:	8b 32       	cpi	r24, 0x2B	; 43
     d46:	79 f0       	breq	.+30     	; 0xd66 <vfprintf+0x84>
     d48:	38 f4       	brcc	.+14     	; 0xd58 <vfprintf+0x76>
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	79 f0       	breq	.+30     	; 0xd6c <vfprintf+0x8a>
     d4e:	83 32       	cpi	r24, 0x23	; 35
     d50:	a1 f4       	brne	.+40     	; 0xd7a <vfprintf+0x98>
     d52:	23 2d       	mov	r18, r3
     d54:	20 61       	ori	r18, 0x10	; 16
     d56:	1d c0       	rjmp	.+58     	; 0xd92 <vfprintf+0xb0>
     d58:	8d 32       	cpi	r24, 0x2D	; 45
     d5a:	61 f0       	breq	.+24     	; 0xd74 <vfprintf+0x92>
     d5c:	80 33       	cpi	r24, 0x30	; 48
     d5e:	69 f4       	brne	.+26     	; 0xd7a <vfprintf+0x98>
     d60:	23 2d       	mov	r18, r3
     d62:	21 60       	ori	r18, 0x01	; 1
     d64:	16 c0       	rjmp	.+44     	; 0xd92 <vfprintf+0xb0>
     d66:	83 2d       	mov	r24, r3
     d68:	82 60       	ori	r24, 0x02	; 2
     d6a:	38 2e       	mov	r3, r24
     d6c:	e3 2d       	mov	r30, r3
     d6e:	e4 60       	ori	r30, 0x04	; 4
     d70:	3e 2e       	mov	r3, r30
     d72:	2a c0       	rjmp	.+84     	; 0xdc8 <vfprintf+0xe6>
     d74:	f3 2d       	mov	r31, r3
     d76:	f8 60       	ori	r31, 0x08	; 8
     d78:	1d c0       	rjmp	.+58     	; 0xdb4 <vfprintf+0xd2>
     d7a:	37 fc       	sbrc	r3, 7
     d7c:	2d c0       	rjmp	.+90     	; 0xdd8 <vfprintf+0xf6>
     d7e:	20 ed       	ldi	r18, 0xD0	; 208
     d80:	28 0f       	add	r18, r24
     d82:	2a 30       	cpi	r18, 0x0A	; 10
     d84:	40 f0       	brcs	.+16     	; 0xd96 <vfprintf+0xb4>
     d86:	8e 32       	cpi	r24, 0x2E	; 46
     d88:	b9 f4       	brne	.+46     	; 0xdb8 <vfprintf+0xd6>
     d8a:	36 fc       	sbrc	r3, 6
     d8c:	81 c1       	rjmp	.+770    	; 0x1090 <vfprintf+0x3ae>
     d8e:	23 2d       	mov	r18, r3
     d90:	20 64       	ori	r18, 0x40	; 64
     d92:	32 2e       	mov	r3, r18
     d94:	19 c0       	rjmp	.+50     	; 0xdc8 <vfprintf+0xe6>
     d96:	36 fe       	sbrs	r3, 6
     d98:	06 c0       	rjmp	.+12     	; 0xda6 <vfprintf+0xc4>
     d9a:	8a e0       	ldi	r24, 0x0A	; 10
     d9c:	98 9e       	mul	r9, r24
     d9e:	20 0d       	add	r18, r0
     da0:	11 24       	eor	r1, r1
     da2:	92 2e       	mov	r9, r18
     da4:	11 c0       	rjmp	.+34     	; 0xdc8 <vfprintf+0xe6>
     da6:	ea e0       	ldi	r30, 0x0A	; 10
     da8:	2e 9e       	mul	r2, r30
     daa:	20 0d       	add	r18, r0
     dac:	11 24       	eor	r1, r1
     dae:	22 2e       	mov	r2, r18
     db0:	f3 2d       	mov	r31, r3
     db2:	f0 62       	ori	r31, 0x20	; 32
     db4:	3f 2e       	mov	r3, r31
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <vfprintf+0xe6>
     db8:	8c 36       	cpi	r24, 0x6C	; 108
     dba:	21 f4       	brne	.+8      	; 0xdc4 <vfprintf+0xe2>
     dbc:	83 2d       	mov	r24, r3
     dbe:	80 68       	ori	r24, 0x80	; 128
     dc0:	38 2e       	mov	r3, r24
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0xe6>
     dc4:	88 36       	cpi	r24, 0x68	; 104
     dc6:	41 f4       	brne	.+16     	; 0xdd8 <vfprintf+0xf6>
     dc8:	f7 01       	movw	r30, r14
     dca:	93 fd       	sbrc	r25, 3
     dcc:	85 91       	lpm	r24, Z+
     dce:	93 ff       	sbrs	r25, 3
     dd0:	81 91       	ld	r24, Z+
     dd2:	7f 01       	movw	r14, r30
     dd4:	81 11       	cpse	r24, r1
     dd6:	b3 cf       	rjmp	.-154    	; 0xd3e <vfprintf+0x5c>
     dd8:	98 2f       	mov	r25, r24
     dda:	9f 7d       	andi	r25, 0xDF	; 223
     ddc:	95 54       	subi	r25, 0x45	; 69
     dde:	93 30       	cpi	r25, 0x03	; 3
     de0:	28 f4       	brcc	.+10     	; 0xdec <vfprintf+0x10a>
     de2:	0c 5f       	subi	r16, 0xFC	; 252
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	9f e3       	ldi	r25, 0x3F	; 63
     de8:	99 83       	std	Y+1, r25	; 0x01
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <vfprintf+0x124>
     dec:	83 36       	cpi	r24, 0x63	; 99
     dee:	31 f0       	breq	.+12     	; 0xdfc <vfprintf+0x11a>
     df0:	83 37       	cpi	r24, 0x73	; 115
     df2:	71 f0       	breq	.+28     	; 0xe10 <vfprintf+0x12e>
     df4:	83 35       	cpi	r24, 0x53	; 83
     df6:	09 f0       	breq	.+2      	; 0xdfa <vfprintf+0x118>
     df8:	59 c0       	rjmp	.+178    	; 0xeac <vfprintf+0x1ca>
     dfa:	21 c0       	rjmp	.+66     	; 0xe3e <vfprintf+0x15c>
     dfc:	f8 01       	movw	r30, r16
     dfe:	80 81       	ld	r24, Z
     e00:	89 83       	std	Y+1, r24	; 0x01
     e02:	0e 5f       	subi	r16, 0xFE	; 254
     e04:	1f 4f       	sbci	r17, 0xFF	; 255
     e06:	88 24       	eor	r8, r8
     e08:	83 94       	inc	r8
     e0a:	91 2c       	mov	r9, r1
     e0c:	53 01       	movw	r10, r6
     e0e:	13 c0       	rjmp	.+38     	; 0xe36 <vfprintf+0x154>
     e10:	28 01       	movw	r4, r16
     e12:	f2 e0       	ldi	r31, 0x02	; 2
     e14:	4f 0e       	add	r4, r31
     e16:	51 1c       	adc	r5, r1
     e18:	f8 01       	movw	r30, r16
     e1a:	a0 80       	ld	r10, Z
     e1c:	b1 80       	ldd	r11, Z+1	; 0x01
     e1e:	36 fe       	sbrs	r3, 6
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <vfprintf+0x146>
     e22:	69 2d       	mov	r22, r9
     e24:	70 e0       	ldi	r23, 0x00	; 0
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <vfprintf+0x14a>
     e28:	6f ef       	ldi	r22, 0xFF	; 255
     e2a:	7f ef       	ldi	r23, 0xFF	; 255
     e2c:	c5 01       	movw	r24, r10
     e2e:	0e 94 5d 08 	call	0x10ba	; 0x10ba <strnlen>
     e32:	4c 01       	movw	r8, r24
     e34:	82 01       	movw	r16, r4
     e36:	f3 2d       	mov	r31, r3
     e38:	ff 77       	andi	r31, 0x7F	; 127
     e3a:	3f 2e       	mov	r3, r31
     e3c:	16 c0       	rjmp	.+44     	; 0xe6a <vfprintf+0x188>
     e3e:	28 01       	movw	r4, r16
     e40:	22 e0       	ldi	r18, 0x02	; 2
     e42:	42 0e       	add	r4, r18
     e44:	51 1c       	adc	r5, r1
     e46:	f8 01       	movw	r30, r16
     e48:	a0 80       	ld	r10, Z
     e4a:	b1 80       	ldd	r11, Z+1	; 0x01
     e4c:	36 fe       	sbrs	r3, 6
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x174>
     e50:	69 2d       	mov	r22, r9
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	02 c0       	rjmp	.+4      	; 0xe5a <vfprintf+0x178>
     e56:	6f ef       	ldi	r22, 0xFF	; 255
     e58:	7f ef       	ldi	r23, 0xFF	; 255
     e5a:	c5 01       	movw	r24, r10
     e5c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <strnlen_P>
     e60:	4c 01       	movw	r8, r24
     e62:	f3 2d       	mov	r31, r3
     e64:	f0 68       	ori	r31, 0x80	; 128
     e66:	3f 2e       	mov	r3, r31
     e68:	82 01       	movw	r16, r4
     e6a:	33 fc       	sbrc	r3, 3
     e6c:	1b c0       	rjmp	.+54     	; 0xea4 <vfprintf+0x1c2>
     e6e:	82 2d       	mov	r24, r2
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	88 16       	cp	r8, r24
     e74:	99 06       	cpc	r9, r25
     e76:	b0 f4       	brcc	.+44     	; 0xea4 <vfprintf+0x1c2>
     e78:	b6 01       	movw	r22, r12
     e7a:	80 e2       	ldi	r24, 0x20	; 32
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     e82:	2a 94       	dec	r2
     e84:	f4 cf       	rjmp	.-24     	; 0xe6e <vfprintf+0x18c>
     e86:	f5 01       	movw	r30, r10
     e88:	37 fc       	sbrc	r3, 7
     e8a:	85 91       	lpm	r24, Z+
     e8c:	37 fe       	sbrs	r3, 7
     e8e:	81 91       	ld	r24, Z+
     e90:	5f 01       	movw	r10, r30
     e92:	b6 01       	movw	r22, r12
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
     e9a:	21 10       	cpse	r2, r1
     e9c:	2a 94       	dec	r2
     e9e:	21 e0       	ldi	r18, 0x01	; 1
     ea0:	82 1a       	sub	r8, r18
     ea2:	91 08       	sbc	r9, r1
     ea4:	81 14       	cp	r8, r1
     ea6:	91 04       	cpc	r9, r1
     ea8:	71 f7       	brne	.-36     	; 0xe86 <vfprintf+0x1a4>
     eaa:	e8 c0       	rjmp	.+464    	; 0x107c <vfprintf+0x39a>
     eac:	84 36       	cpi	r24, 0x64	; 100
     eae:	11 f0       	breq	.+4      	; 0xeb4 <vfprintf+0x1d2>
     eb0:	89 36       	cpi	r24, 0x69	; 105
     eb2:	41 f5       	brne	.+80     	; 0xf04 <vfprintf+0x222>
     eb4:	f8 01       	movw	r30, r16
     eb6:	37 fe       	sbrs	r3, 7
     eb8:	07 c0       	rjmp	.+14     	; 0xec8 <vfprintf+0x1e6>
     eba:	60 81       	ld	r22, Z
     ebc:	71 81       	ldd	r23, Z+1	; 0x01
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	0c 5f       	subi	r16, 0xFC	; 252
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	08 c0       	rjmp	.+16     	; 0xed8 <vfprintf+0x1f6>
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	07 2e       	mov	r0, r23
     ece:	00 0c       	add	r0, r0
     ed0:	88 0b       	sbc	r24, r24
     ed2:	99 0b       	sbc	r25, r25
     ed4:	0e 5f       	subi	r16, 0xFE	; 254
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	f3 2d       	mov	r31, r3
     eda:	ff 76       	andi	r31, 0x6F	; 111
     edc:	3f 2e       	mov	r3, r31
     ede:	97 ff       	sbrs	r25, 7
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <vfprintf+0x212>
     ee2:	90 95       	com	r25
     ee4:	80 95       	com	r24
     ee6:	70 95       	com	r23
     ee8:	61 95       	neg	r22
     eea:	7f 4f       	sbci	r23, 0xFF	; 255
     eec:	8f 4f       	sbci	r24, 0xFF	; 255
     eee:	9f 4f       	sbci	r25, 0xFF	; 255
     ef0:	f0 68       	ori	r31, 0x80	; 128
     ef2:	3f 2e       	mov	r3, r31
     ef4:	2a e0       	ldi	r18, 0x0A	; 10
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	a3 01       	movw	r20, r6
     efa:	0e 94 a4 08 	call	0x1148	; 0x1148 <__ultoa_invert>
     efe:	88 2e       	mov	r8, r24
     f00:	86 18       	sub	r8, r6
     f02:	45 c0       	rjmp	.+138    	; 0xf8e <vfprintf+0x2ac>
     f04:	85 37       	cpi	r24, 0x75	; 117
     f06:	31 f4       	brne	.+12     	; 0xf14 <vfprintf+0x232>
     f08:	23 2d       	mov	r18, r3
     f0a:	2f 7e       	andi	r18, 0xEF	; 239
     f0c:	b2 2e       	mov	r11, r18
     f0e:	2a e0       	ldi	r18, 0x0A	; 10
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	25 c0       	rjmp	.+74     	; 0xf5e <vfprintf+0x27c>
     f14:	93 2d       	mov	r25, r3
     f16:	99 7f       	andi	r25, 0xF9	; 249
     f18:	b9 2e       	mov	r11, r25
     f1a:	8f 36       	cpi	r24, 0x6F	; 111
     f1c:	c1 f0       	breq	.+48     	; 0xf4e <vfprintf+0x26c>
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <vfprintf+0x244>
     f20:	88 35       	cpi	r24, 0x58	; 88
     f22:	79 f0       	breq	.+30     	; 0xf42 <vfprintf+0x260>
     f24:	b5 c0       	rjmp	.+362    	; 0x1090 <vfprintf+0x3ae>
     f26:	80 37       	cpi	r24, 0x70	; 112
     f28:	19 f0       	breq	.+6      	; 0xf30 <vfprintf+0x24e>
     f2a:	88 37       	cpi	r24, 0x78	; 120
     f2c:	21 f0       	breq	.+8      	; 0xf36 <vfprintf+0x254>
     f2e:	b0 c0       	rjmp	.+352    	; 0x1090 <vfprintf+0x3ae>
     f30:	e9 2f       	mov	r30, r25
     f32:	e0 61       	ori	r30, 0x10	; 16
     f34:	be 2e       	mov	r11, r30
     f36:	b4 fe       	sbrs	r11, 4
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <vfprintf+0x272>
     f3a:	fb 2d       	mov	r31, r11
     f3c:	f4 60       	ori	r31, 0x04	; 4
     f3e:	bf 2e       	mov	r11, r31
     f40:	09 c0       	rjmp	.+18     	; 0xf54 <vfprintf+0x272>
     f42:	34 fe       	sbrs	r3, 4
     f44:	0a c0       	rjmp	.+20     	; 0xf5a <vfprintf+0x278>
     f46:	29 2f       	mov	r18, r25
     f48:	26 60       	ori	r18, 0x06	; 6
     f4a:	b2 2e       	mov	r11, r18
     f4c:	06 c0       	rjmp	.+12     	; 0xf5a <vfprintf+0x278>
     f4e:	28 e0       	ldi	r18, 0x08	; 8
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <vfprintf+0x27c>
     f54:	20 e1       	ldi	r18, 0x10	; 16
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <vfprintf+0x27c>
     f5a:	20 e1       	ldi	r18, 0x10	; 16
     f5c:	32 e0       	ldi	r19, 0x02	; 2
     f5e:	f8 01       	movw	r30, r16
     f60:	b7 fe       	sbrs	r11, 7
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <vfprintf+0x290>
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	0c 5f       	subi	r16, 0xFC	; 252
     f6e:	1f 4f       	sbci	r17, 0xFF	; 255
     f70:	06 c0       	rjmp	.+12     	; 0xf7e <vfprintf+0x29c>
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 5f       	subi	r16, 0xFE	; 254
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	a3 01       	movw	r20, r6
     f80:	0e 94 a4 08 	call	0x1148	; 0x1148 <__ultoa_invert>
     f84:	88 2e       	mov	r8, r24
     f86:	86 18       	sub	r8, r6
     f88:	fb 2d       	mov	r31, r11
     f8a:	ff 77       	andi	r31, 0x7F	; 127
     f8c:	3f 2e       	mov	r3, r31
     f8e:	36 fe       	sbrs	r3, 6
     f90:	0d c0       	rjmp	.+26     	; 0xfac <vfprintf+0x2ca>
     f92:	23 2d       	mov	r18, r3
     f94:	2e 7f       	andi	r18, 0xFE	; 254
     f96:	a2 2e       	mov	r10, r18
     f98:	89 14       	cp	r8, r9
     f9a:	58 f4       	brcc	.+22     	; 0xfb2 <vfprintf+0x2d0>
     f9c:	34 fe       	sbrs	r3, 4
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <vfprintf+0x2d4>
     fa0:	32 fc       	sbrc	r3, 2
     fa2:	09 c0       	rjmp	.+18     	; 0xfb6 <vfprintf+0x2d4>
     fa4:	83 2d       	mov	r24, r3
     fa6:	8e 7e       	andi	r24, 0xEE	; 238
     fa8:	a8 2e       	mov	r10, r24
     faa:	05 c0       	rjmp	.+10     	; 0xfb6 <vfprintf+0x2d4>
     fac:	b8 2c       	mov	r11, r8
     fae:	a3 2c       	mov	r10, r3
     fb0:	03 c0       	rjmp	.+6      	; 0xfb8 <vfprintf+0x2d6>
     fb2:	b8 2c       	mov	r11, r8
     fb4:	01 c0       	rjmp	.+2      	; 0xfb8 <vfprintf+0x2d6>
     fb6:	b9 2c       	mov	r11, r9
     fb8:	a4 fe       	sbrs	r10, 4
     fba:	0f c0       	rjmp	.+30     	; 0xfda <vfprintf+0x2f8>
     fbc:	fe 01       	movw	r30, r28
     fbe:	e8 0d       	add	r30, r8
     fc0:	f1 1d       	adc	r31, r1
     fc2:	80 81       	ld	r24, Z
     fc4:	80 33       	cpi	r24, 0x30	; 48
     fc6:	21 f4       	brne	.+8      	; 0xfd0 <vfprintf+0x2ee>
     fc8:	9a 2d       	mov	r25, r10
     fca:	99 7e       	andi	r25, 0xE9	; 233
     fcc:	a9 2e       	mov	r10, r25
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <vfprintf+0x300>
     fd0:	a2 fe       	sbrs	r10, 2
     fd2:	06 c0       	rjmp	.+12     	; 0xfe0 <vfprintf+0x2fe>
     fd4:	b3 94       	inc	r11
     fd6:	b3 94       	inc	r11
     fd8:	04 c0       	rjmp	.+8      	; 0xfe2 <vfprintf+0x300>
     fda:	8a 2d       	mov	r24, r10
     fdc:	86 78       	andi	r24, 0x86	; 134
     fde:	09 f0       	breq	.+2      	; 0xfe2 <vfprintf+0x300>
     fe0:	b3 94       	inc	r11
     fe2:	a3 fc       	sbrc	r10, 3
     fe4:	11 c0       	rjmp	.+34     	; 0x1008 <vfprintf+0x326>
     fe6:	a0 fe       	sbrs	r10, 0
     fe8:	06 c0       	rjmp	.+12     	; 0xff6 <vfprintf+0x314>
     fea:	b2 14       	cp	r11, r2
     fec:	88 f4       	brcc	.+34     	; 0x1010 <vfprintf+0x32e>
     fee:	28 0c       	add	r2, r8
     ff0:	92 2c       	mov	r9, r2
     ff2:	9b 18       	sub	r9, r11
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <vfprintf+0x330>
     ff6:	b2 14       	cp	r11, r2
     ff8:	60 f4       	brcc	.+24     	; 0x1012 <vfprintf+0x330>
     ffa:	b6 01       	movw	r22, r12
     ffc:	80 e2       	ldi	r24, 0x20	; 32
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1004:	b3 94       	inc	r11
    1006:	f7 cf       	rjmp	.-18     	; 0xff6 <vfprintf+0x314>
    1008:	b2 14       	cp	r11, r2
    100a:	18 f4       	brcc	.+6      	; 0x1012 <vfprintf+0x330>
    100c:	2b 18       	sub	r2, r11
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <vfprintf+0x332>
    1010:	98 2c       	mov	r9, r8
    1012:	21 2c       	mov	r2, r1
    1014:	a4 fe       	sbrs	r10, 4
    1016:	10 c0       	rjmp	.+32     	; 0x1038 <vfprintf+0x356>
    1018:	b6 01       	movw	r22, r12
    101a:	80 e3       	ldi	r24, 0x30	; 48
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1022:	a2 fe       	sbrs	r10, 2
    1024:	17 c0       	rjmp	.+46     	; 0x1054 <vfprintf+0x372>
    1026:	a1 fc       	sbrc	r10, 1
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <vfprintf+0x34e>
    102a:	88 e7       	ldi	r24, 0x78	; 120
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <vfprintf+0x352>
    1030:	88 e5       	ldi	r24, 0x58	; 88
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	b6 01       	movw	r22, r12
    1036:	0c c0       	rjmp	.+24     	; 0x1050 <vfprintf+0x36e>
    1038:	8a 2d       	mov	r24, r10
    103a:	86 78       	andi	r24, 0x86	; 134
    103c:	59 f0       	breq	.+22     	; 0x1054 <vfprintf+0x372>
    103e:	a1 fe       	sbrs	r10, 1
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x364>
    1042:	8b e2       	ldi	r24, 0x2B	; 43
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <vfprintf+0x366>
    1046:	80 e2       	ldi	r24, 0x20	; 32
    1048:	a7 fc       	sbrc	r10, 7
    104a:	8d e2       	ldi	r24, 0x2D	; 45
    104c:	b6 01       	movw	r22, r12
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1054:	89 14       	cp	r8, r9
    1056:	38 f4       	brcc	.+14     	; 0x1066 <vfprintf+0x384>
    1058:	b6 01       	movw	r22, r12
    105a:	80 e3       	ldi	r24, 0x30	; 48
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1062:	9a 94       	dec	r9
    1064:	f7 cf       	rjmp	.-18     	; 0x1054 <vfprintf+0x372>
    1066:	8a 94       	dec	r8
    1068:	f3 01       	movw	r30, r6
    106a:	e8 0d       	add	r30, r8
    106c:	f1 1d       	adc	r31, r1
    106e:	80 81       	ld	r24, Z
    1070:	b6 01       	movw	r22, r12
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    1078:	81 10       	cpse	r8, r1
    107a:	f5 cf       	rjmp	.-22     	; 0x1066 <vfprintf+0x384>
    107c:	22 20       	and	r2, r2
    107e:	09 f4       	brne	.+2      	; 0x1082 <vfprintf+0x3a0>
    1080:	42 ce       	rjmp	.-892    	; 0xd06 <vfprintf+0x24>
    1082:	b6 01       	movw	r22, r12
    1084:	80 e2       	ldi	r24, 0x20	; 32
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 68 08 	call	0x10d0	; 0x10d0 <fputc>
    108c:	2a 94       	dec	r2
    108e:	f6 cf       	rjmp	.-20     	; 0x107c <vfprintf+0x39a>
    1090:	f6 01       	movw	r30, r12
    1092:	86 81       	ldd	r24, Z+6	; 0x06
    1094:	97 81       	ldd	r25, Z+7	; 0x07
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x3ba>
    1098:	8f ef       	ldi	r24, 0xFF	; 255
    109a:	9f ef       	ldi	r25, 0xFF	; 255
    109c:	2b 96       	adiw	r28, 0x0b	; 11
    109e:	e2 e1       	ldi	r30, 0x12	; 18
    10a0:	0c 94 1e 09 	jmp	0x123c	; 0x123c <__epilogue_restores__>

000010a4 <strnlen_P>:
    10a4:	fc 01       	movw	r30, r24
    10a6:	05 90       	lpm	r0, Z+
    10a8:	61 50       	subi	r22, 0x01	; 1
    10aa:	70 40       	sbci	r23, 0x00	; 0
    10ac:	01 10       	cpse	r0, r1
    10ae:	d8 f7       	brcc	.-10     	; 0x10a6 <strnlen_P+0x2>
    10b0:	80 95       	com	r24
    10b2:	90 95       	com	r25
    10b4:	8e 0f       	add	r24, r30
    10b6:	9f 1f       	adc	r25, r31
    10b8:	08 95       	ret

000010ba <strnlen>:
    10ba:	fc 01       	movw	r30, r24
    10bc:	61 50       	subi	r22, 0x01	; 1
    10be:	70 40       	sbci	r23, 0x00	; 0
    10c0:	01 90       	ld	r0, Z+
    10c2:	01 10       	cpse	r0, r1
    10c4:	d8 f7       	brcc	.-10     	; 0x10bc <strnlen+0x2>
    10c6:	80 95       	com	r24
    10c8:	90 95       	com	r25
    10ca:	8e 0f       	add	r24, r30
    10cc:	9f 1f       	adc	r25, r31
    10ce:	08 95       	ret

000010d0 <fputc>:
    10d0:	0f 93       	push	r16
    10d2:	1f 93       	push	r17
    10d4:	cf 93       	push	r28
    10d6:	df 93       	push	r29
    10d8:	fb 01       	movw	r30, r22
    10da:	23 81       	ldd	r18, Z+3	; 0x03
    10dc:	21 fd       	sbrc	r18, 1
    10de:	03 c0       	rjmp	.+6      	; 0x10e6 <fputc+0x16>
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	2c c0       	rjmp	.+88     	; 0x113e <fputc+0x6e>
    10e6:	22 ff       	sbrs	r18, 2
    10e8:	16 c0       	rjmp	.+44     	; 0x1116 <fputc+0x46>
    10ea:	46 81       	ldd	r20, Z+6	; 0x06
    10ec:	57 81       	ldd	r21, Z+7	; 0x07
    10ee:	24 81       	ldd	r18, Z+4	; 0x04
    10f0:	35 81       	ldd	r19, Z+5	; 0x05
    10f2:	42 17       	cp	r20, r18
    10f4:	53 07       	cpc	r21, r19
    10f6:	44 f4       	brge	.+16     	; 0x1108 <fputc+0x38>
    10f8:	a0 81       	ld	r26, Z
    10fa:	b1 81       	ldd	r27, Z+1	; 0x01
    10fc:	9d 01       	movw	r18, r26
    10fe:	2f 5f       	subi	r18, 0xFF	; 255
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	31 83       	std	Z+1, r19	; 0x01
    1104:	20 83       	st	Z, r18
    1106:	8c 93       	st	X, r24
    1108:	26 81       	ldd	r18, Z+6	; 0x06
    110a:	37 81       	ldd	r19, Z+7	; 0x07
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	37 83       	std	Z+7, r19	; 0x07
    1112:	26 83       	std	Z+6, r18	; 0x06
    1114:	14 c0       	rjmp	.+40     	; 0x113e <fputc+0x6e>
    1116:	8b 01       	movw	r16, r22
    1118:	ec 01       	movw	r28, r24
    111a:	fb 01       	movw	r30, r22
    111c:	00 84       	ldd	r0, Z+8	; 0x08
    111e:	f1 85       	ldd	r31, Z+9	; 0x09
    1120:	e0 2d       	mov	r30, r0
    1122:	09 95       	icall
    1124:	89 2b       	or	r24, r25
    1126:	e1 f6       	brne	.-72     	; 0x10e0 <fputc+0x10>
    1128:	d8 01       	movw	r26, r16
    112a:	16 96       	adiw	r26, 0x06	; 6
    112c:	8d 91       	ld	r24, X+
    112e:	9c 91       	ld	r25, X
    1130:	17 97       	sbiw	r26, 0x07	; 7
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	17 96       	adiw	r26, 0x07	; 7
    1136:	9c 93       	st	X, r25
    1138:	8e 93       	st	-X, r24
    113a:	16 97       	sbiw	r26, 0x06	; 6
    113c:	ce 01       	movw	r24, r28
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <__ultoa_invert>:
    1148:	fa 01       	movw	r30, r20
    114a:	aa 27       	eor	r26, r26
    114c:	28 30       	cpi	r18, 0x08	; 8
    114e:	51 f1       	breq	.+84     	; 0x11a4 <__ultoa_invert+0x5c>
    1150:	20 31       	cpi	r18, 0x10	; 16
    1152:	81 f1       	breq	.+96     	; 0x11b4 <__ultoa_invert+0x6c>
    1154:	e8 94       	clt
    1156:	6f 93       	push	r22
    1158:	6e 7f       	andi	r22, 0xFE	; 254
    115a:	6e 5f       	subi	r22, 0xFE	; 254
    115c:	7f 4f       	sbci	r23, 0xFF	; 255
    115e:	8f 4f       	sbci	r24, 0xFF	; 255
    1160:	9f 4f       	sbci	r25, 0xFF	; 255
    1162:	af 4f       	sbci	r26, 0xFF	; 255
    1164:	b1 e0       	ldi	r27, 0x01	; 1
    1166:	3e d0       	rcall	.+124    	; 0x11e4 <__ultoa_invert+0x9c>
    1168:	b4 e0       	ldi	r27, 0x04	; 4
    116a:	3c d0       	rcall	.+120    	; 0x11e4 <__ultoa_invert+0x9c>
    116c:	67 0f       	add	r22, r23
    116e:	78 1f       	adc	r23, r24
    1170:	89 1f       	adc	r24, r25
    1172:	9a 1f       	adc	r25, r26
    1174:	a1 1d       	adc	r26, r1
    1176:	68 0f       	add	r22, r24
    1178:	79 1f       	adc	r23, r25
    117a:	8a 1f       	adc	r24, r26
    117c:	91 1d       	adc	r25, r1
    117e:	a1 1d       	adc	r26, r1
    1180:	6a 0f       	add	r22, r26
    1182:	71 1d       	adc	r23, r1
    1184:	81 1d       	adc	r24, r1
    1186:	91 1d       	adc	r25, r1
    1188:	a1 1d       	adc	r26, r1
    118a:	20 d0       	rcall	.+64     	; 0x11cc <__ultoa_invert+0x84>
    118c:	09 f4       	brne	.+2      	; 0x1190 <__ultoa_invert+0x48>
    118e:	68 94       	set
    1190:	3f 91       	pop	r19
    1192:	2a e0       	ldi	r18, 0x0A	; 10
    1194:	26 9f       	mul	r18, r22
    1196:	11 24       	eor	r1, r1
    1198:	30 19       	sub	r19, r0
    119a:	30 5d       	subi	r19, 0xD0	; 208
    119c:	31 93       	st	Z+, r19
    119e:	de f6       	brtc	.-74     	; 0x1156 <__ultoa_invert+0xe>
    11a0:	cf 01       	movw	r24, r30
    11a2:	08 95       	ret
    11a4:	46 2f       	mov	r20, r22
    11a6:	47 70       	andi	r20, 0x07	; 7
    11a8:	40 5d       	subi	r20, 0xD0	; 208
    11aa:	41 93       	st	Z+, r20
    11ac:	b3 e0       	ldi	r27, 0x03	; 3
    11ae:	0f d0       	rcall	.+30     	; 0x11ce <__ultoa_invert+0x86>
    11b0:	c9 f7       	brne	.-14     	; 0x11a4 <__ultoa_invert+0x5c>
    11b2:	f6 cf       	rjmp	.-20     	; 0x11a0 <__ultoa_invert+0x58>
    11b4:	46 2f       	mov	r20, r22
    11b6:	4f 70       	andi	r20, 0x0F	; 15
    11b8:	40 5d       	subi	r20, 0xD0	; 208
    11ba:	4a 33       	cpi	r20, 0x3A	; 58
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <__ultoa_invert+0x7c>
    11be:	49 5d       	subi	r20, 0xD9	; 217
    11c0:	31 fd       	sbrc	r19, 1
    11c2:	40 52       	subi	r20, 0x20	; 32
    11c4:	41 93       	st	Z+, r20
    11c6:	02 d0       	rcall	.+4      	; 0x11cc <__ultoa_invert+0x84>
    11c8:	a9 f7       	brne	.-22     	; 0x11b4 <__ultoa_invert+0x6c>
    11ca:	ea cf       	rjmp	.-44     	; 0x11a0 <__ultoa_invert+0x58>
    11cc:	b4 e0       	ldi	r27, 0x04	; 4
    11ce:	a6 95       	lsr	r26
    11d0:	97 95       	ror	r25
    11d2:	87 95       	ror	r24
    11d4:	77 95       	ror	r23
    11d6:	67 95       	ror	r22
    11d8:	ba 95       	dec	r27
    11da:	c9 f7       	brne	.-14     	; 0x11ce <__ultoa_invert+0x86>
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	61 05       	cpc	r22, r1
    11e0:	71 05       	cpc	r23, r1
    11e2:	08 95       	ret
    11e4:	9b 01       	movw	r18, r22
    11e6:	ac 01       	movw	r20, r24
    11e8:	0a 2e       	mov	r0, r26
    11ea:	06 94       	lsr	r0
    11ec:	57 95       	ror	r21
    11ee:	47 95       	ror	r20
    11f0:	37 95       	ror	r19
    11f2:	27 95       	ror	r18
    11f4:	ba 95       	dec	r27
    11f6:	c9 f7       	brne	.-14     	; 0x11ea <__ultoa_invert+0xa2>
    11f8:	62 0f       	add	r22, r18
    11fa:	73 1f       	adc	r23, r19
    11fc:	84 1f       	adc	r24, r20
    11fe:	95 1f       	adc	r25, r21
    1200:	a0 1d       	adc	r26, r0
    1202:	08 95       	ret

00001204 <__prologue_saves__>:
    1204:	2f 92       	push	r2
    1206:	3f 92       	push	r3
    1208:	4f 92       	push	r4
    120a:	5f 92       	push	r5
    120c:	6f 92       	push	r6
    120e:	7f 92       	push	r7
    1210:	8f 92       	push	r8
    1212:	9f 92       	push	r9
    1214:	af 92       	push	r10
    1216:	bf 92       	push	r11
    1218:	cf 92       	push	r12
    121a:	df 92       	push	r13
    121c:	ef 92       	push	r14
    121e:	ff 92       	push	r15
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	cf 93       	push	r28
    1226:	df 93       	push	r29
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	ca 1b       	sub	r28, r26
    122e:	db 0b       	sbc	r29, r27
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	09 94       	ijmp

0000123c <__epilogue_restores__>:
    123c:	2a 88       	ldd	r2, Y+18	; 0x12
    123e:	39 88       	ldd	r3, Y+17	; 0x11
    1240:	48 88       	ldd	r4, Y+16	; 0x10
    1242:	5f 84       	ldd	r5, Y+15	; 0x0f
    1244:	6e 84       	ldd	r6, Y+14	; 0x0e
    1246:	7d 84       	ldd	r7, Y+13	; 0x0d
    1248:	8c 84       	ldd	r8, Y+12	; 0x0c
    124a:	9b 84       	ldd	r9, Y+11	; 0x0b
    124c:	aa 84       	ldd	r10, Y+10	; 0x0a
    124e:	b9 84       	ldd	r11, Y+9	; 0x09
    1250:	c8 84       	ldd	r12, Y+8	; 0x08
    1252:	df 80       	ldd	r13, Y+7	; 0x07
    1254:	ee 80       	ldd	r14, Y+6	; 0x06
    1256:	fd 80       	ldd	r15, Y+5	; 0x05
    1258:	0c 81       	ldd	r16, Y+4	; 0x04
    125a:	1b 81       	ldd	r17, Y+3	; 0x03
    125c:	aa 81       	ldd	r26, Y+2	; 0x02
    125e:	b9 81       	ldd	r27, Y+1	; 0x01
    1260:	ce 0f       	add	r28, r30
    1262:	d1 1d       	adc	r29, r1
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	ed 01       	movw	r28, r26
    1270:	08 95       	ret

00001272 <_exit>:
    1272:	f8 94       	cli

00001274 <__stop_program>:
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <__stop_program>
